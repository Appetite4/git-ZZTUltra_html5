{
"EMPTY":{
"Number":0,
"Cycle":1,
"NoStat":1,
"Char":0,
"Color":15,
"BlockObject":0,
"Pushable":1,
"CustomDraw":1,
"Code":"
:NOACTION
#END
:$CUSTOMDRAW
#CHAR 0
#COLOR (.COLOR & 15)
#END

'Override this routine to change what #ENDGAME does
:$ENDGAME
#SET ~HEALTH 0
#END

'Override this routine to change the 30 FPS handler during pause
:$PAUSED
#IF TEST($PLAYERPAUSED=0) END
#IF NOT VALID($PLAYER) END
#SET $PAUSECYCLE ($PAUSECYCLE+1)
#IF TEST(~PAUSEANIMATED=0) ENDPAUSE
#IF TEST($PAUSECYCLE < 8) NORMPPAUSE
#IF TEST($PASSAGEEMERGE=1) PASSAGEPAUSE
#SET ($PLAYER.CHAR) 0
#SET ($PLAYER.COLORALL) 15
#ENDPAUSE
:PASSAGEPAUSE
#SET ($PLAYER.CHAR) 240
#SET ($PLAYER.COLORALL) ($PASSAGECOL & 7 * 16 + 15)
#ENDPAUSE
:NORMPPAUSE
#SET ($PLAYER.CHAR) ~PLAYERCHARNORM
#SET ($PLAYER.COLORALL) ~PLAYERCOLORNORM
:ENDPAUSE
#IF TEST($PAUSECYCLE > 14) SET $PAUSECYCLE 0
#SETPOS $PLAYER ($PLAYER.X),($PLAYER.Y)
#SETGUILABEL PAUSEDMESSAGELOC \"Paused...\" -1
#SETGUILABEL PAUSINGMESSAGELOC \"Pausing...\" -1
#END

'Override this routine to customize how normal player color is displayed
'$PLAYERMODE is set as follows:
'1=Normal player movement mode
'2=Player is dead; can't move
'3=ZZT title screen mode; no interaction, color is black
'4=SZT title screen mode; no interaction, color is normal
'5=Editor mode (character shown when in editor)
:$PLAYERCOLORDISPLAY
#IF TEST($PLAYERPAUSED!=0) END
#IF TEST($PLAYERMODE!=1) #SET $COL ~PLAYERCOLORNORM
#IF TEST($PLAYERMODE=3) #SET $COL 0
#END

'Override this routine to customize how normal player char is displayed
:$PLAYERCHARDISPLAY
#IF TEST($PLAYERPAUSED!=0) END
#SET $CHR ~PLAYERCHARNORM
'If 4-directional character desired, set to something like this...
'#SET $CHR ($LASTSHOOTDIR + 234)
'This assumes player character occupies right=234,down=235,left=236,up=237.
#END

'Override this routine to customize how player char/col is displayed
'when player is energized
:$ENERGIZERDISPLAY
#SET $CHR ($CHR & 1 + 1)
#RANDOM $COL 0 7
#SET $COL ($COL * 16 + 15)
#END

'Override this routine to change how second-by-second
'time interval is handled during unpaused state
:$SECONDINTERVAL
#IF TEST($PLAYERMODE!1) PASTAUTOSAVE
#SET $LASTSAVESECS ($LASTSAVESECS+1)
#IF TEST($LASTSAVESECS < ~AUTOSAVESECS) PASTAUTOSAVE
#IF TEST($DIDTRYMOVE!1) PASTAUTOSAVE
#SET $LASTSAVESECS 0
#SET $DIDTRYMOVE 0
#SAVEBOARD 3
:PASTAUTOSAVE
#IF TEST(~TIMELIMIT=0) END
#SET ~TIME (~TIME+1)
#IF TEST(~TIME = ~TIMELIMIT) TIMEISOUT
#IF TEST(~TIME + 10 ! ~TIMELIMIT) END
#PLAYSOUND TIMELOW
#IF TEST(~BQUESTHACK=1) ALTTIMELOW
Time is running out!
#END
:ALTTIMELOW
Running out of time!
#END
:TIMEISOUT
#DISPATCHTO $PLAYER:RECVHURT
#END

'This is the general on-property-changed routine.  If this routine is
'customized, it is recommended that CUSTOMONPROP be overridden instead
'of this one, so that preexisting code remains active.
:$ONPROPERTY
#SUBSTR $KEYPROP $PROP 0 3
#IF TEST($KEYPROP=\"KEY\") MODKEYS
#IF TEST($PROP=\"TIME\") MODTIME
#IF TEST($PROP=\"HEALTH\") SETGUILABEL HEALTHLABEL ~HEALTH -1
#IF TEST($PROP=\"HEALTH\") DRAWBAR HEALTHBAR 0 100 ~HEALTH -1
#IF TEST($PROP=\"GEMS\") SETGUILABEL GEMSLABEL ~GEMS -1
#IF TEST($PROP=\"AMMO\") SETGUILABEL AMMOLABEL ~AMMO -1
#IF TEST($PROP=\"TORCHES\") SETGUILABEL TORCHESLABEL ~TORCHES -1
#IF TEST(~SCORE > ~SCORELIMIT) SET ~SCORE ~SCORELIMIT
#IF TEST($PROP=\"SCORE\") SETGUILABEL SCORELABEL ~SCORE -1
#IF TEST($PROP=\"SOUNDOFF\") DISPATCH SHOWSOUNDLABEL
#IF TEST($PROP=\"Z\") SETZQTY
#CUSTOMONPROP

'Default custom property handler updates changed quantity with a timeout.
:CUSTOMONPROP
#IF TEST($EXTRAINVNAME != $PROP) #END
#IF TEST(~WORLDTYPE!=-2) #DYNTEXTVAR $VAL;$$PROP:
#IF TEST(~WORLDTYPE=-2) #DYNTEXTVAR $VAL;$$PROP
#SETGUILABEL EXTRAINV $VAL -1
#GETPROPERTY $$PROP $VAL
#SETGUILABEL EXTRAINVLABEL $VAL -1
#SET $EXTRAINVNAME \"\"
#SET $EXTRAINVTIME ~EXTRAINVTIMEOUT
#END

:SETZQTY
#SETGUILABEL STONEAMT ~Z -1
#IF TEST(~Z < 0) #SETGUILABEL STONEAMT \"\" -1
#SETGUILABEL STONELABEL ~ZSTONELABEL -1
#END
:SHOWSOUNDLABEL
#IF TEST(~BQUESTHACK=1) ALTSOUNDLABEL
#IF TEST(~SOUNDOFF) SHOWSOUNDOFF
#SETGUILABEL SOUNDLABEL \"Be Quiet\" -1
#END
:SHOWSOUNDOFF
#SETGUILABEL SOUNDLABEL \"Be Noisy\" -1
#END
:ALTSOUNDLABEL
#IF TEST(~SOUNDOFF) ALTSOUNDOFF
#SETGUILABEL SOUNDLABEL \"Mute    \" -1
#END
:ALTSOUNDOFF
#SETGUILABEL SOUNDLABEL \"Unmute  \" -1
#END
:EVENT_TOGGLESOUND
#IF TEST(~SOUNDOFF) TURNSOUNDON
#STOPSOUND 0 15
#SETPROPERTY SOUNDOFF 1
#END
:TURNSOUNDON
#SETPROPERTY SOUNDOFF 0
#END
:MODKEYS
#SUBSTR $KEYCOLOR $PROP 3 2
#INT $KEYCOLOR $KEYCOLOR
#SET $LABELCOLOR ($KEYCOLOR-8)
#GETPROPERTY $$PROP $VAL
#IF TEST($VAL < 1) ERASEKEY
#IF TEST($VAL = 1) SHOWFEMALE
#IF TEST($VAL > 9) SET $VAL \"+\"
#SETGUILABEL KEY$$LABELCOLOR $VAL -1
#END
:SHOWFEMALE
#SETGUILABEL KEY$$LABELCOLOR \"\u000C\" -1
#END
:ERASEKEY
#SETGUILABEL KEY$$LABELCOLOR \" \" -1
#END
:MODTIME
#IF TEST(~TIMELIMIT=0) ERASETIME
#SET $TIMELEFT (~TIMELIMIT - ~TIME)
#SETGUILABEL TIMEVALIDLABEL \"Time:\" -1
#SETGUILABEL TIMELABEL $TIMELEFT -1
#END
:ERASETIME
#SETGUILABEL TIMEVALIDLABEL \"     \" -1
#SETGUILABEL TIMELABEL \"     \" -1
#END

:EVENT_GAMEHINT
#SEND ALL:HINT
#END
:EVENT_PAUSEGAME
#IF TEST($PLAYERMODE!1) END
#IF TEST($PLAYERPAUSED=1) END
#SET $PLAYERPAUSED 1
#SET $PASSAGEEMERGE 0
#PAUSE
#END

'Override this to change what happens when a savestate is loaded.
:$ONRESTORESTATE
#DISPATCH EVENT_PAUSEGAME
:EVENT_QUITN
#GETPROPERTY ZZTGAMEGUI $_ZZTGAMEGUI
#GETPROPERTY SZTGAMEGUI $_SZTGAMEGUI
#IF TEST(~WORLDTYPE=-2) USEGUI $$_SZTGAMEGUI
#IF TEST(~WORLDTYPE!=-2) USEGUI $$_ZZTGAMEGUI
#ERASEVIEWPORT
#UPDATEVIEWPORT
#GENERICUPDATEGUI

'Override this to change what happens when a saved game file is loaded.
:$ONRESTOREGAME
#DISPATCH EVENT_PAUSEGAME
#GETPROPERTY ZZTGAMEGUI $_ZZTGAMEGUI
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#IF TEST(~WORLDTYPE=-2) USEGUI $$_SZTGAMEGUI
#IF TEST(~WORLDTYPE!=-2) USEGUI $$_ZZTGAMEGUI
:GENERICUPDATEGUI
#IF TEST(~WORLDTYPE=-2) UPDATESZTGUI
:UPDATEZZTGUI
#SETGUILABEL HEALTHLABEL ~HEALTH -1
#SETGUILABEL TORCHESLABEL ~TORCHES -1
#DISPATCH MODTIME
:COMMONUPDATEGUI
#SETGUILABEL GEMSLABEL ~GEMS -1
#SETGUILABEL AMMOLABEL ~AMMO -1
#SETGUILABEL SCORELABEL ~SCORE -1
#DISPATCH SHOWSOUNDLABEL
#SET $PROP \"KEY8\"
#DISPATCH MODKEYS
#SET $PROP \"KEY9\"
#DISPATCH MODKEYS
#SET $PROP \"KEY10\"
#DISPATCH MODKEYS
#SET $PROP \"KEY11\"
#DISPATCH MODKEYS
#SET $PROP \"KEY12\"
#DISPATCH MODKEYS
#SET $PROP \"KEY13\"
#DISPATCH MODKEYS
#SET $PROP \"KEY14\"
#DISPATCH MODKEYS
#SET $PROP \"KEY15\"
#DISPATCH MODKEYS
#END
:UPDATESZTGUI
#DRAWBAR HEALTHBAR 0 100 ~HEALTH -1
#IF TEST(~Z > 0) SETGUILABEL STONELABEL \"Stone\" -1
#IF TEST(~Z > 0) SETGUILABEL STONEAMT ~Z -1
#COMMONUPDATEGUI

:EVENT_USETORCH
#IF TEST(~ISDARK) TRYTORCH
#IF TEST($NOTORCHNEEDEDMSG ! 0) END
#SET $NOTORCHNEEDEDMSG 1
Don't need torch - room is not dark!
#END
:TRYTORCH
#IF TEST(~TORCHCYCLES > 0) END
#IF TEST(~TORCHES > 0) LIGHTTORCH
#IF TEST($TORCHESOUTMSG ! 0) END
#SET $TORCHESOUTMSG 1
You don't have any torches!
#END
:LIGHTTORCH
#SET ~TORCHES (~TORCHES - 1)
#SET ~TORCHCYCLES 200
:LIGHTAURA
#FORMASK $TORX $TORY ($PLAYER.X),($PLAYER.Y) TORCH
#LIGHTEN $TORX,$TORY
#FORNEXT
#UPDATELIT
#END
:DARKAURA
#FORMASK $TORX $TORY ($PLAYER.X),($PLAYER.Y) TORCH
#DARKEN $TORX,$TORY
#FORNEXT
#UPDATELIT
#END
:OLDDARKAURA
#FORMASK $TORX $TORY ($OLDPUSHX),($OLDPUSHY) TORCH
#DARKEN $TORX,$TORY
#FORNEXT
#UPDATELIT
#END

:EVENT_PLAYGAME
#STOPSOUND 0 15
#SET $JUSTINTRO 0
#SET $MUSTRESTART 0
#IF TEST(~WORLDTYPE!=-2) ZZT_START
#GETPROPERTY THISGUI $_SZTTITLEGUI
#USEGUI SZTINTRO
#SET $PLAYERPAUSED 0
#SET $PLAYERMODE 4
#CHANGEBOARD 0
#SET ~TIME 0
#SET ~LEGACYCAMERA 0
#CAMERAFOCUS ($PLAYER.X),($PLAYER.Y)
#SET ~LEGACYCAMERA $ORIGLEGACYCAMERA
#UNPAUSE
#DISSOLVEVIEWPORT -1
#END
:ZZT_START
#GETPROPERTY THISGUI $_ZZTTITLEGUI
#IF TEST(~EVERPLAYED ! 0) SAVEBOARD -1
#GETPROPERTY ZZTGAMEGUI $_ZZTGAMEGUI
#USEGUI $$_ZZTGAMEGUI
#SET ~EVERPLAYED 1
#CHANGEBOARD ~STARTBOARD
#SET ~TIME 0
#SET $PLAYERPAUSED 1
#SET $PLAYERMODE 1
#PAUSE
#DISPATCH UPDATEZZTGUI
#DISSOLVEVIEWPORT -1
#END
:EVENT_SZT_START
#GETPROPERTY SZTGAMEGUI $_SZTGAMEGUI
#IF TEST($JUSTINTRO=1) DOQUITGAME
#IF TEST(~EVERPLAYED ! 0) SAVEBOARD -1
#USEGUI $$_SZTGAMEGUI
#SET ~EVERPLAYED 1
#CHANGEBOARD ~STARTBOARD
#SET ~TIME 0
#SET $PLAYERPAUSED 1
#SET $PLAYERMODE 1
#PAUSE
#DISPATCH UPDATESZTGUI
#STOPSOUND 0 15
#SET ~LEGACYCAMERA 0
#CAMERAFOCUS ($PLAYER.X),($PLAYER.Y)
#SET ~LEGACYCAMERA $ORIGLEGACYCAMERA
#DISSOLVEVIEWPORT -1
#END
:EVENT_SAVEGAME
!INCSAVE;Quick Save
!FILESAVE;SAV File
#IF TEST(~WORLDTYPE=-2) $
#END
:INCSAVE
#SET $LASTSAVESECS 0
#SET $DIDTRYMOVE 0
#SAVEBOARD 0
#END
:FILESAVE
#SAVEWORLD 1
#END
:EVENT_RESTOREGAME
#IF TEST(~ALLOWINGAMERESTORE) YESRESTORE
#IF TEST(~BOARD != 0) #END
:YESRESTORE
#RESTOREGAME 0
#END
:EVENT_INTRODUCTION
#STOPSOUND 0 15
#SET $JUSTINTRO 1
#SET $MUSTRESTART 0
#GETPROPERTY THISGUI $_SZTTITLEGUI
#USEGUI SZTINTRO
#SET $PLAYERPAUSED 0
#SET $PLAYERMODE 4
#CHANGEBOARD 0
#SET ~TIME 0
#SET ~LEGACYCAMERA 0
#CAMERAFOCUS ($PLAYER.X),($PLAYER.Y)
#SET ~LEGACYCAMERA $ORIGLEGACYCAMERA
#UNPAUSE
#DISSOLVEVIEWPORT -1
#END
:EVENT_QUITSZT
#CONFMESSAGE CONFMESSAGE \"Show Main Menu?\" DOQUIT NOACTION
#END
:EVENT_QUITZZT
#CONFMESSAGE CONFMESSAGE \"  Show Main Menu?\" DOQUIT NOACTION
#END
:DOQUIT
#STOPSOUND 0 15
#PAUSE
#USEGUI DEBUGMENU
#END
:DOQUITGAME
#STOPSOUND 0 15
#PLAYERINPUT $NULL $NULL
#SET ~GAMESPEED $STOREDSPEED
#SET ~HEALTH 100
#SET ~GEMS 0
#SET ~AMMO 0
#SET ~TORCHES 0
#SET ~SCORE 0
#SET ~Z 0
#SET ~TIME 0
#SET ~TORCHCYCLES 0
#SET ~ENERGIZERCYCLES 0
#SET ~KEY0 0
#SET ~KEY1 0
#SET ~KEY2 0
#SET ~KEY3 0
#SET ~KEY4 0
#SET ~KEY5 0
#SET ~KEY6 0
#SET ~KEY7 0
#SET ~KEY8 0
#SET ~KEY9 0
#SET ~KEY10 0
#SET ~KEY11 0
#SET ~KEY12 0
#SET ~KEY13 0
#SET ~KEY14 0
#SET ~KEY15 0
#SET ~NUMCLASSICFLAGS 0
#SET ~TELOBJECT 0
'Following blank line gets rid of 'Game Over' toast message

#IF TEST(~WORLDTYPE!=-2) SHOWZZTTITLE
:SHOWSZTTITLE
#SET $PLAYERMODE 3
#PAUSE
#CHANGEBOARD 0
#SET ~TIME 0
#USEGUI $$_SZTTITLEGUI
#IF TEST($_SZTTITLEGUI = \"CUSTOMSZT\") SETGUILABEL CUSTOMTEXT ~WORLDNAME -1
#END
:SHOWZZTTITLE
#SET $PLAYERMODE 3
#UNPAUSE
#USEGUI $$_ZZTTITLEGUI
#SETGUILABEL WORLDNAME ~WORLDNAME -1
#DRAWPEN SPEEDCURSOR 0 8 ~GAMESPEED 31 31
#CHANGEBOARD 0
#SET ~TIME 0
#DISSOLVEVIEWPORT -1
#END

:EVENT_WORLDMENU
#LOADWORLD 0
'#LOADWORLD ~WORLDTYPE
#END

:EVENT_ORDERING
Ordering info?  FYI, the shelf life of ZZT is over.
#END

:EVENT_ABOUTZZTULTRA
:EVENT_ABOUTZZT
:EVENT_GAMEHELP
ZZT and Super ZZT were created in the
early 1990s by Epic MegaGames.

The ZZT Ultra engine is a creation of
Christopher Allen.  ZZT Ultra was built
to reproduce the ZZT experience on a
modern platform, as well as to offer
numerous enhancements and modifications.

Questions about ZZT Ultra?  Check out
the official ZZT Ultra page at
http://www.chriskallen.com/zzt.
#END
:EVENT_SPEED
#SETGUILABEL SPEEDLABEL \"Game speed:\" 31
#SELECTPEN SPEEDCURSOR 0 8 ~GAMESPEED 31 159 MODSPEED
#END
:MODSPEED
#SETGUILABEL SPEEDLABEL \"Game speed:\" 30
#SETPROPERTY GAMESPEED $PENRESULT
#SET $STOREDSPEED $PENRESULT
#END

:EVENT_QUITGAME
#IF TEST($PLAYERMODE=2) QUITGAMEHS2
#IF TEST(~THISGUI = \"CLASSICZZTGAME\") EVENT_QUITGAMEYN
#IF TEST(~THISGUI = \"CLASSICSZTGAME\") EVENT_QUITGAMEYN
#CONFMESSAGE CONFMESSAGE \"  Quit game?\" QUITGAMEHS1 NOACTION
#END
:EVENT_QUITGAMEYN
#SETGUILABEL CONFMESSAGE \"End this game?\" -1
#CONFMESSAGE UNSEENMESSAGE \" \" QUITGAMEHS1 EVENT_QUITN
#END

:QUITGAMEHS2
#IF TEST(~HIGHSCOREPROMPT >= 1) DOHSPROMPT
#DOQUITGAME
:QUITGAMEHS1
#IF TEST(~HIGHSCOREPROMPT = 1) DOHSPROMPT
#DOQUITGAME

'High score implementation
:DOHSPROMPT
#PAUSE
#IF TEST(~HIGHSCOREACTIVE = 0) DOQUITGAME
#IF TEST(~SCORE < ~HIGHSCOREMIN) DOQUITGAME
#IF TEST(~WORLDTYPE=-2) #USEGUI NAMEREGSZT
#IF TEST(~WORLDTYPE!=-2) #USEGUI NAMEREG
#TEXTENTRY NAMEENTRY \"\" 30 78 SUBMITHS DOQUITGAME
#END
:SUBMITHS
#DYNTEXTVAR $HSLINE;$~SCORE,$$TEXTRESULT
#POSTHS $HSLINE ~WORLDNAME 2 -1
#DOQUITGAME
:$ONPOSTHS
#SETGUILABEL LOADINGLOC \"            \" -1
#SETGUILABEL LOADINGANIM \"            \" -1
#END
:$ONFAILPOSTHS
#SETGUILABEL LOADINGLOC \"            \" -1
#SETGUILABEL LOADINGANIM \"            \" -1
Error:  Failed to post to high scores.
#END

:EVENT_HISCORES
#GETHS ~WORLDNAME 2 -1
#END
:$ONGETHS
:$ONFAILGETHS
#SETGUILABEL LOADINGLOC \"            \" -1
#SETGUILABEL LOADINGANIM \"            \" -1
#SET $HSLINE 0
#GETHSENTRY $VAL $HSLINE 2
#GETHSENTRY $NAME $HSLINE 3
#IF TEST($VAL = -1) HSNOTAVAIL
Score    Name
-------  ----------------------------
:HSLOOP
#DYNTEXTVAR $HSCOREVAL;$$VAL                
#SUBSTR $HSCOREVAL $HSCOREVAL 0 8
#DYNTEXT $$HSCOREVAL $$NAME
#SET $HSLINE ($HSLINE+1)
#GETHSENTRY $VAL $HSLINE 2
#GETHSENTRY $NAME $HSLINE 3
#IF TEST($VAL != -1) HSLOOP
#END
:HSNOTAVAIL
$High scores are not available
$for this world.
#END

'Generic on-world-loaded routine.  It is recommended that an overridden
'routine dispatch $BASEONWORLDLOAD and then run its own custom code.
'If only the initial GUI/title screen loading handler needs to be customized
'for a WAD, a better option would be to override DEFAULTWADINIT.
:$ONWORLDLOAD
#DISPATCH $BASEONWORLDLOAD
#IF TEST(~WORLDTYPE = -3) DEFAULTWADINIT
#END
:DEFAULTWADINIT
#SHOWZZTTITLE
#END
:$BASEONWORLDLOAD
#SET $ORIGLEGACYCAMERA ~LEGACYCAMERA
#SET $EXTRAINVTIME 0
#SET $EXTRAINVNAME \"\"
#SET $TEMPNOEDGENAV 0
#SET $NTHROOM 0
#SET $WTSTOP 0
#SET $ALLOWCPYMOVE 1
#SET $INITDIR -1
#SET $INITSDIR -1
#SET $LASTSHOOTDIR -1
#SET $TELHACK -1
#SET $EDGEHACK -1
#SET $REENTRYCOPY -1
#SET $MUSTRESTART 0
#SET $FORESTITER 0
#SET $STOREDSPEED ~GAMESPEED
#SET $OLDPUSHX 0
#SET $OLDPUSHY 0
#SET $ENERSCORE 0
#SET $SCROLLMSG 0
#SET $GEMHEALTHMSG 0
#SET $AMMOCOUNTER 0
#SET $TORCHCOUNTER 0
#SET $ENERGOTTEN 0
#SET $FAKEMSG 0
#SET $FORMSG 0
#SET $TORCHNEEDEDMSG 0
#SET $NOTORCHNEEDEDMSG 0
#SET $AMMOOUTMSG 0
#SET $TORCHESOUTMSG 0
#SET $CANTSHOOTMSG 0
#SETARRAY $VSTACK 0
#DISPATCH SETLINECHARS
#END
:SETLINECHARS
#SETARRAY $LDRAWCHARS 0
#PUSHARRAY $LDRAWCHARS 249 //0
#PUSHARRAY $LDRAWCHARS 198 //R
#PUSHARRAY $LDRAWCHARS 210 //D
#PUSHARRAY $LDRAWCHARS 201 //DR
#PUSHARRAY $LDRAWCHARS 181 //L
#PUSHARRAY $LDRAWCHARS 205 //LR
#PUSHARRAY $LDRAWCHARS 187 //LD
#PUSHARRAY $LDRAWCHARS 203 //LDR
#PUSHARRAY $LDRAWCHARS 208 //U
#PUSHARRAY $LDRAWCHARS 200 //UR
#PUSHARRAY $LDRAWCHARS 186 //UD
#PUSHARRAY $LDRAWCHARS 204 //UDR
#PUSHARRAY $LDRAWCHARS 188 //UL
#PUSHARRAY $LDRAWCHARS 202 //ULR
#PUSHARRAY $LDRAWCHARS 185 //ULD
#PUSHARRAY $LDRAWCHARS 206 //ULDR
#SETARRAY $WDRAWCHARS 0
#PUSHARRAY $WDRAWCHARS 249 //0
#PUSHARRAY $WDRAWCHARS 196 //R
#PUSHARRAY $WDRAWCHARS 179 //D
#PUSHARRAY $WDRAWCHARS 218 //DR
#PUSHARRAY $WDRAWCHARS 196 //L
#PUSHARRAY $WDRAWCHARS 196 //LR
#PUSHARRAY $WDRAWCHARS 191 //LD
#PUSHARRAY $WDRAWCHARS 194 //LDR
#PUSHARRAY $WDRAWCHARS 179 //U
#PUSHARRAY $WDRAWCHARS 192 //UR
#PUSHARRAY $WDRAWCHARS 179 //UD
#PUSHARRAY $WDRAWCHARS 195 //UDR
#PUSHARRAY $WDRAWCHARS 217 //UL
#PUSHARRAY $WDRAWCHARS 193 //ULR
#PUSHARRAY $WDRAWCHARS 180 //ULD
#PUSHARRAY $WDRAWCHARS 197 //ULDR
#END

'Generic console routine.  Overriding this is not recommended.
:EVENT_CONSOLE
#IF NOT TEST(~ALLOWINGAMECONSOLE) #END
#PAUSE
#GETPROPERTY THISGUI $_CONSOLERETURNGUI
#USEGUI CONSOLEGUI
#END
:CON_QUIT
#USEGUI $$_CONSOLERETURNGUI
#UNPAUSE
#UPDATEVIEWPORT
#GENERICUPDATEGUI

'Generic cheat box routine.  If overridden, cheats can be added or removed.
:EVENT_CHEAT
#IF NOT TEST(~ALLOWINGAMECHEAT) #END
#TEXTENTRY CHEATLOC \"\" 20 15 CHEATACTION NOACTION
#END
:CHEATACTION
#SET ~HIGHSCOREACTIVE 0
#PLAY -IG
#SUBSTR $KEYPROP $TEXTRESULT 0 1
#IF TEST($KEYPROP=\"#\") ONELINER
#IF TEST($TEXTRESULT=\"+time\") TAKE TIME 30
#IF TEST($TEXTRESULT=\"-time\") GIVE TIME 30
#IF TEST($TEXTRESULT=\"+dark\") MAKEDARKF
#IF TEST($TEXTRESULT=\"-dark\") MAKELIGHTF
#IF TEST($TEXTRESULT=\"light\") MAKELIGHT
#IF TEST($KEYPROP=\"+\") FLAGSETTER
#IF TEST($KEYPROP=\"-\") FLAGCLEARER
#IF TEST($TEXTRESULT=\"health\") GIVE HEALTH 50
#IF TEST($TEXTRESULT=\"gems\") GIVE GEMS 5
#IF TEST($TEXTRESULT=\"ammo\") GIVE AMMO 10
#IF TEST($TEXTRESULT=\"torches\") GIVE TORCHES 3
#IF TEST($TEXTRESULT=\"score\") GIVE SCORE 500
#IF TEST($TEXTRESULT=\"time\") TAKE TIME 30
#IF TEST($TEXTRESULT=\"z\") GIVE Z 1
#IF TEST($TEXTRESULT=\"noz\") #SET ~Z -1
#IF TEST($TEXTRESULT=\"zap\") ZAP4WAY
#IF TEST($TEXTRESULT=\"keys\") ALL7KEYS
#IF TEST($TEXTRESULT=\"dark\") MAKEDARK
#IF TEST($TEXTRESULT=\"kill\") DISPATCH $ENDGAME
#IF TEST(~FASTCHEATFLAG) SPECFLAGSETTER
#END
:ONELINER
#EXECCOMMAND $TEXTRESULT
#SET ~HIGHSCOREACTIVE 0
#END
:FLAGSETTER
#SUBSTR $KEYPROP $TEXTRESULT 1 100
#LEN $TLEN $KEYPROP
#IF TEST($TLEN <= 0) #END
#DYNTEXTVAR $TEXTRESULT;#SET $$KEYPROP
#EXECCOMMAND $TEXTRESULT
#END
:FLAGCLEARER
#SUBSTR $KEYPROP $TEXTRESULT 1 100
#LEN $TLEN $KEYPROP
#IF TEST($TLEN <= 0) #END
#DYNTEXTVAR $TEXTRESULT;#CLEAR $$KEYPROP
#EXECCOMMAND $TEXTRESULT
#END
:SPECFLAGSETTER
#SET $KEYPROP $TEXTRESULT
#LEN $TLEN $KEYPROP
#IF TEST($TLEN <= 0) #END
#DYNTEXTVAR $TEXTRESULT;#SET $$KEYPROP
#EXECCOMMAND $TEXTRESULT
#END
:ZAP4WAY
#SPAWN ($PLAYER.X+1),($PLAYER.Y) WHITE EMPTY
#SPAWN ($PLAYER.X-1),($PLAYER.Y) WHITE EMPTY
#SPAWN ($PLAYER.X),($PLAYER.Y+1) WHITE EMPTY
#SPAWN ($PLAYER.X),($PLAYER.Y-1) WHITE EMPTY
#END
:ALL7KEYS
#GIVE BLUE KEY 1
#GIVE GREEN KEY 1
#GIVE CYAN KEY 1
#GIVE RED KEY 1
#GIVE PURPLE KEY 1
#GIVE YELLOW KEY 1
#GIVE WHITE KEY 1
#END
:MAKEDARKF
#SET DARK
:MAKEDARK
#SETPROPERTY ISDARK 1
#ERASEVIEWPORT
#UPDATEVIEWPORT
#END
:MAKELIGHTF
#CLEAR DARK
:MAKELIGHT
#SETPROPERTY ISDARK 0
#ERASEVIEWPORT
#UPDATEVIEWPORT
#END

'Inventory action keypress handler.
:EVENT_INVENTORY
#LEN $TLEN ~INVENTORYFLAG
#IF TEST($TLEN <= 0) #END
#SUBSTR $FIRSTCHAR ~INVENTORYFLAG 0 1
#IF TEST($FIRSTCHAR=\"-\") DOINVCLEARFLAG
#DYNTEXTVAR $TEXTRESULT;#SET $~INVENTORYFLAG
#EXECCOMMAND $TEXTRESULT
#END
:DOINVCLEARFLAG
#SUBSTR $FIRSTCHAR ~INVENTORYFLAG 1 256
#DYNTEXTVAR $TEXTRESULT;#CLEAR $$FIRSTCHAR
#EXECCOMMAND $TEXTRESULT
#END

:OPT_HELP
$Configuration Options

When you modify the options in ZZT
Ultra, certain aspects of the gameplay
and engine behavior will change.  These
quantities are implicitly set as world
properties when you play a world.

There are three categories of options
that you can use to configure ZZT Ultra:
General, ZZT-specific, and Super ZZT-
specific.

$General Properties

The \"General\" properties apply to ZZT
and SZT worlds equally.  It is possible
to edit all the general properties at
once by pressing A.  You can also edit
these properties by category with the
numbers 1 to 7.

$Modern and Classic Styles

ZZT Ultra tracks two systems of general
properties:  a \"modern\" system and a
\"classic\" system.  The modern system
favors the best experience ZZT Ultra
can offer.  The classic system delivers
fewer advanced capabilities than the
modern system, but it comes much closer
to the original engine behavior.  Switch
between these systems by pressing C.

$World Type-Specific Properties

Other properties are imposed only when
a ZZT file is loaded, or only when
an SZT file is loaded.  Press Z or S to
access world type-specific properties.

$More Info

You can add your own properties freely
to any category.  However, you should
not remove a property that is present
in the default configuration, because
these properties are required for the
engine to run.

The full list of configuration options
are documented on the this web page:

www.chriskallen.com/zzt/
  zztoop.php#configproperties
#END

:CON_HELP
The ZZT Ultra console lets you observe
and/or modify the environment while you
are playing a world.  You get access to
world properties, board properties for
the current board, and global variables.

Modify content at your own risk.  The
console represents a snapshot of the
real-time state of the game world.  If
you tweak the wrong variable, you could
break your game.

The ? key lets you enter longer cheat
codes than normal.  In ZZT Ultra, you
are not restricted to the classic text
like ?gems and ?ammo built into the
older engines--you can also enter a
ZZT-OOP command into the box.
#END

:EVENT_SHOOTLAST
#SET $INITSDIR $LASTSHOOTDIR
#END
:EVENT_RIGHT
#IF TEST($PLAYERPAUSED=0) END
#SET $INITDIR 0
#EVALMOVEDIR
:EVENT_DOWN
#IF TEST($PLAYERPAUSED=0) END
#SET $INITDIR 1
#EVALMOVEDIR
:EVENT_LEFT
#IF TEST($PLAYERPAUSED=0) END
#SET $INITDIR 2
#EVALMOVEDIR
:EVENT_UP
#IF TEST($PLAYERPAUSED=0) END
#SET $INITDIR 3
#EVALMOVEDIR
:EVALMOVEDIR
#SET $X ($PLAYER.X)
#SET $Y ($PLAYER.Y)
#OFFSETBYDIR [1, $INITDIR] $X $Y
:EVALMOVEXY
#SWITCHTYPE $X,$Y PLAYER DEFMOVE EMPTY DEFMOVE GEM DEFMOVE AMMO DEFMOVE TORCH DEFMOVE ENERGIZER DEFMOVE \\
    STONE DEFMOVE FAKE DEFMOVE FLOOR DEFMOVE BULLET DEFMOVE STAR DEFMOVE BEAR DEFMOVE RUFFIAN DEFMOVE \\
    LION DEFMOVE TIGER DEFMOVE HEAD DEFMOVE SEGMENT DEFMOVE ROTON DEFMOVE DRAGONPUP DEFMOVE \\
    PAIRER DEFMOVE SPIDER DEFMOVE FOREST DEFMOVE WATERN DEFMOVE WATERS DEFMOVE WATERE DEFMOVE \\
    WATERW DEFMOVE WEB DEFMOVE KEY MAYBEMOVE DOOR MAYBEMOVE SCROLL MAYBEMOVE TRANSPORTER MAYBEMOVE \\
    PASSAGE MAYBEMOVE BOMB MAYBEMOVE BOULDER MAYBEMOVE SLIDERNS MAYBEMOVE SLIDEREW MAYBEMOVE \\
    OBJECT MAYBEMOVE
#SET ($PLAYER.COLORALL) 31
#SET $PLAYERPAUSED 0
#SETGUILABEL PAUSEDMESSAGELOC \"           \" -1
#SETGUILABEL PAUSINGMESSAGELOC \"           \" -1
#SET $RESULT 0
#UNPAUSE
#END
:MAYBEMOVE
#SET ($PLAYER.COLORALL) 31
#SET $PLAYERPAUSED 0
#SETGUILABEL PAUSEDMESSAGELOC \"           \" -1
#SETGUILABEL PAUSINGMESSAGELOC \"           \" -1
#SET $RESULT 1
#UNPAUSE
#END
:DEFMOVE
#SET ($PLAYER.COLORALL) 31
#SET $PLAYERPAUSED 0
#SETGUILABEL PAUSEDMESSAGELOC \"           \" -1
#SETGUILABEL PAUSINGMESSAGELOC \"           \" -1
#SET $RESULT 2
#UNPAUSE
#END
"
},

"PATCH":{
"Number":255,
"Char":88,
"Color":13,
"NoStat":1,
"Code":"
#END
"
},

"FILELINK":{
"Number":254,
"Char":70,
"Color":13,
"NoStat":1,
"HasOwnCode":1,
"CustomStart":1,
"Code":"
:$START
"
},

"_WINDTUNNEL":{
"Number":253,
"Cycle":1,
"NoStat":1,
"Char":0,
"Color":15,
"BlockObject":0,
"Pushable":1,
"CustomDraw":1,
"Code":"
#END
:$CUSTOMDRAW
#CHAR 0
#COLOR (.COLOR & 15)
#END
"
},

"SOLID":{
"Number":21,
"Char":219,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"NORMAL":{
"Number":22,
"Char":178,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"BREAKABLE":{
"Number":23,
"Char":177,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"FAKE":{
"Number":27,
"Char":178,
"Color":14,
"NoStat":1,
"BlockObject":0,
"Pushable":1,
"Code":"
#END
"
},

"INVISIBLE":{
"Number":28,
"Char":0,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":0,
"Code":"
#END
"
},

"FOREST":{
"Number":20,
"Char":176,
"Color":32,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Code":"
#END
"
},

"LAVA":{
"Number":19,
"Char":111,
"Color":78,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"WATER":{
"Number":19,
"Char":176,
"Color":159,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"FLOOR":{
"Number":47,
"Char":176,
"Color":14,
"NoStat":1,
"BlockObject":0,
"Pushable":0,
"Code":"
#END
"
},

"WATERN":{
"Number":48,
"Char":30,
"Color":25,
"NoStat":1,
"DominantColor":1,
"BlockObject":0,
"Pushable":0,
"Code":"
#END
"
},

"WATERS":{
"Number":49,
"Char":31,
"Color":25,
"NoStat":1,
"DominantColor":1,
"BlockObject":0,
"Pushable":0,
"Code":"
#END
"
},

"WATERW":{
"Number":50,
"Char":17,
"Color":25,
"NoStat":1,
"DominantColor":1,
"BlockObject":0,
"Pushable":0,
"Code":"
#END
"
},

"WATERE":{
"Number":51,
"Char":16,
"Color":25,
"NoStat":1,
"DominantColor":1,
"BlockObject":0,
"Pushable":0,
"Code":"
#END
"
},

"RICOCHET":{
"Number":32,
"Char":42,
"Color":10,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"BOARDEDGE":{
"Number":1,
"Char":32,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"MESSENGER":{
"Number":2,
"Cycle":1,
"NoStat":1,
"Char":109,
"Color":14,
"BlockObject":0,
"Pushable":1,
"Code":"
#END
"
},

"MONITOR":{
"Number":3,
"Cycle":1,
"NoStat":1,
"Char":77,
"Color":14,
"BlockObject":0,
"Pushable":1,
"Code":"
#END
"
},

"BOULDER":{
"Number":24,
"Char":254,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Pushable":1,
"Code":"
#END
"
},

"SLIDERNS":{
"Number":25,
"Char":18,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Pushable":2,
"Code":"
#END
:$PUSHBEHAVIOR
#IF TEST($PUSHDIR=1) SET $PUSH 1
#IF TEST($PUSHDIR=3) SET $PUSH 1
#END
"
},

"SLIDEREW":{
"Number":26,
"Char":29,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Pushable":2,
"Code":"
#END
:$PUSHBEHAVIOR
#IF TEST($PUSHDIR=0) SET $PUSH 1
#IF TEST($PUSHDIR=2) SET $PUSH 1
#END
"
},

"AMMO":{
"Number":5,
"Char":132,
"Color":3,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Code":"
#END
"
},

"TORCH":{
"Number":6,
"Char":157,
"Color":6,
"NoStat":1,
"AlwaysLit":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":0,
"Code":"
#END
"
},

"GEM":{
"Number":7,
"Char":4,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"Code":"
#END
"
},

"KEY":{
"Number":8,
"Char":12,
"Color":15,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Pushable":1,
"Code":"
#END
"
},

"DOOR":{
"Number":9,
"Char":10,
"Color":15,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"CustomDraw":1,
"FullColor":1,
"Code":"
#END
'The custom draw routine for doors tries to maintain the stored color
'as representing the color as represented in ZZT-OOP (low-order bits),
'while the high-order bits represents the white surface.  In effect,
'the drawing code inverts the meaning of foreground and background bit
'fields, with an additional XOR being performed on bit 3 after it is 
'moved to bit 7.
:$CUSTOMDRAW
#CHAR 10
#SET $DTEMPHCOL (.COLOR * 16 & 240 ^ 128)
#COLOR (.COLOR / 16 & 15 + $DTEMPHCOL)
#END
"
},

"PASSAGE":{
"Number":11,
"Char":240,
"Color":127,
"BlockObject":1,
"BlockPlayer":1,
"CustomDraw":1,
"FullColor":1,
"AlwaysLit":1,
"P2":512,
"P3":0,
"Code":"
#END
:$CUSTOMDRAW
#CHAR 240
#OBJAT $PDOBJ .X,.Y
#SET $PDBGCOL (.COLOR & 7 * 16)
#IF TEST($PDOBJ.P2 & 624 = $PDBGCOL) USEP2COLOR
#SET ($PDOBJ.P2) (.COLOR & 15 * 16 ^ 128 + 15)
:USEP2COLOR
#COLOR ($PDOBJ.P2)
#END
"
},

"ENERGIZER":{
"Number":14,
"Char":127,
"Color":5,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":0,
"Code":"
#END
"
},

"CLOCKWISE":{
"Number":16,
"Char":179,
"Color":14,
"Cycle":3,
"BlockObject":1,
"BlockPlayer":1,
"HasOwnChar":1,
"Code":"
#WALK N
:CLOOP
#CHAR4DIR FLOW 179 47 196 92
#WALK CW FLOW
/i
#SET .P3 0
:FINDEMPTY
#DIR2UVECT8 .P3 $X $Y
#IF TYPEIS (.X+$X),(.Y+$Y) EMPTY FOUNDIT
#SET .P3 (.P3+1&7)
#IF TEST(.P3!0) FINDEMPTY
:FOUNDIT
#SET $DLAST .P3
:MOVELOOP
#DIR2UVECT8 .P3 $X $Y
#DIR2UVECT8 (.P3+1) $DX $DY
#SET $X (.X + $X)
#SET $Y (.Y + $Y)
#SET $DX (.X + $DX)
#SET $DY (.Y + $DY)
#SWITCHTYPE $X,$Y AMMO CANMOVE GEM CANMOVE KEY CANMOVE BOULDER CANMOVE PLAYER PLAYERMOVE \\
    BOMB SPECMOVE BEAR SPECMOVE RUFFIAN SPECMOVE LION SPECMOVE TIGER SPECMOVE ROTON SPECMOVE \\
    DRAGONPUP SPECMOVE PAIRER SPECMOVE SCROLL SPECMOVE STONE SPECMOVE
:NEXTITER
#SET .P3 (.P3-1&7)
#IF TEST(.P3 ! $DLAST) MOVELOOP
#CLOOP
:CANMOVE
#IF NOT TYPEIS $DX,$DY EMPTY NEXTITER
#CLONE $X,$Y
#SPAWN $DX,$DY CLONE
#SPAWN $X,$Y EMPTY
#IF TEST(.P3=$DLAST) SET $DLAST ($DLAST+1&7)
#NEXTITER
:SPECMOVE
#IF NOT TYPEIS $DX,$DY EMPTY NEXTITER
#OBJAT $BOBJ $X,$Y
#SETPOS $BOBJ $DX,$DY
#IF TEST(.P3=$DLAST) SET $DLAST ($DLAST+1&7)
#NEXTITER
:PLAYERMOVE
#IF NOT TYPEIS $DX,$DY EMPTY NEXTITER
#OBJAT $BOBJ $X,$Y
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SETPOS $BOBJ $DX,$DY
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#IF TEST(.P3=$DLAST) SET $DLAST ($DLAST+1&7)
#NEXTITER
"
},

"COUNTER":{
"Number":17,
"Char":92,
"Color":14,
"Cycle":2,
"BlockObject":1,
"BlockPlayer":1,
"HasOwnChar":1,
"Code":"
#WALK N
:CLOOP
#CHAR4DIR FLOW 92 196 47 179
#WALK CW FLOW
/i
#SET .P3 0
:FINDEMPTY
#DIR2UVECT8 .P3 $X $Y
#IF TYPEIS (.X+$X),(.Y+$Y) EMPTY FOUNDIT
#SET .P3 (.P3+1&7)
#IF TEST(.P3!0) FINDEMPTY
:FOUNDIT
#SET $DLAST .P3
:MOVELOOP
#DIR2UVECT8 .P3 $X $Y
#DIR2UVECT8 (.P3-1) $DX $DY
#SET $X (.X + $X)
#SET $Y (.Y + $Y)
#SET $DX (.X + $DX)
#SET $DY (.Y + $DY)
#SWITCHTYPE $X,$Y AMMO CANMOVE GEM CANMOVE KEY CANMOVE BOULDER CANMOVE PLAYER PLAYERMOVE \\
    BOMB SPECMOVE BEAR SPECMOVE RUFFIAN SPECMOVE LION SPECMOVE TIGER SPECMOVE ROTON SPECMOVE \\
    DRAGONPUP SPECMOVE PAIRER SPECMOVE SCROLL SPECMOVE STONE SPECMOVE
:NEXTITER
#SET .P3 (.P3+1&7)
#IF TEST(.P3 ! $DLAST) MOVELOOP
#CLOOP
:CANMOVE
#IF NOT TYPEIS $DX,$DY EMPTY NEXTITER
#CLONE $X,$Y
#SPAWN $DX,$DY CLONE
#SPAWN $X,$Y EMPTY
#IF TEST(.P3=$DLAST) SET $DLAST ($DLAST-1&7)
#NEXTITER
:SPECMOVE
#IF NOT TYPEIS $DX,$DY EMPTY NEXTITER
#OBJAT $BOBJ $X,$Y
#SETPOS $BOBJ $DX,$DY
#IF TEST(.P3=$DLAST) SET $DLAST ($DLAST-1&7)
#NEXTITER
:PLAYERMOVE
#IF NOT TYPEIS $DX,$DY EMPTY NEXTITER
#OBJAT $BOBJ $X,$Y
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SETPOS $BOBJ $DX,$DY
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#IF TEST(.P3=$DLAST) SET $DLAST ($DLAST-1&7)
#NEXTITER
"
},

"STAR":{
"Number":15,
"Char":47,
"Color":12,
"Cycle":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"HasOwnChar":1,
"P1":1,
"P2":0,
"Code":"
#SET .P2 (.P2 - 1 & 255 * 2)
:SMOVE
#CHAR4DIR FLOW 47 196 92 179
#WALK CW FLOW
#IF TEST(.COLOR & 15 = 15) CWRAP
#COLOR (.COLOR + 1)
#DOMOVE
:CWRAP
#COLOR 9
:DOMOVE
#SET .P2 (.P2 - 1)
#IF TEST(.P2 < 0) TIMEOUT
#IF TEST(.P2 & 1) REALMOVE
:NOMOVE
/i
#SMOVE
:REALMOVE
#SET .P3 SEEK
#SWITCHTYPE [1,.P3] PLAYER HURTPLAYER BREAKABLE BDIE LAVA PHASEMOVE TRANSPORTER NOMOVE
?.P3
#SMOVE
:PHASEMOVE
#FORCEGO .P3
#SMOVE
:HURTPLAYER
#OBJAT $BOBJ [1,.P3]
#DISPATCHTO $BOBJ:RECVHURT
#DIE
:BDIE
#COLORAT $SCOLOR [1,.P3]
#SPAWN [1,.P3] EMPTY;COLOR=$SCOLOR
#PLAYSOUND ENEMYDIE
:TIMEOUT
#DIE
"
},

"BULLET":{
"Number":18,
"Char":248,
"Color":15,
"Cycle":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Squashable":1,
"P1":1,
"P2":0,
"Code":"
#SET .P3 FLOW
#IF TYPEIS [1,.P3] LAVA PHASEMOVE
#IF NOT BLOCKED FLOW NORMMOVE
#SWITCHTYPE [1,.P3] PLAYER HURTPLAYER GEM SDIE BREAKABLE BDIE BULLET WEIRDHIT
#IF TEST(.P1 = 1) SKIPENEMYTEST
#SWITCHTYPE [1,.P3] HEAD KILL1 BEAR KILL1 LION KILL1 DRAGONPUP KILL2 PAIRER KILL2 SPIDER KILL2 \\
    RUFFIAN KILL2 TIGER KILL2 ROTON KILL3 SEGMENT KILL3
:SKIPENEMYTEST
#IF TEST(.P2 = -1) JUSTHIT
#IF TYPEIS [1,.P3] RICOCHET TURNAROUND
#SET .P2 (.P3+1&3)
#IF TYPEIS [-1,.P2] RICOCHET TURNRIGHT
#IF TYPEIS [1,.P2] RICOCHET TURNLEFT
:JUSTHIT
#IF TYPEIS [1,.P3] OBJECT SENDSHOT
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
:TURNAROUND
#SET .P2 -1
#WALK OPP FLOW
#PLAYSOUND RICOCHET
#RESTART
:TURNRIGHT
#IF TYPEIS [1,.P2] RICOCHET JUSTHIT
#SET .P2 -1
#WALK CW FLOW
#PLAYSOUND RICOCHET
#RESTART
:TURNLEFT
#SET .P2 -1
#WALK CCW FLOW
#PLAYSOUND RICOCHET
#RESTART
:NORMMOVE
#SET .P2 0
?FLOW
#RESTART
:PHASEMOVE
#SET .P2 0
#FORCEGO .P3
#RESTART
:HURTPLAYER
#OBJAT $BOBJ [1,.P3]
#DISPATCHTO $BOBJ:RECVHURT
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
:SDIE
#IF TEST(.P1!0) DIE
:BDIE
#COLORAT $SCOLOR [1,.P3]
#SPAWN [1,.P3] EMPTY;COLOR=$SCOLOR
:BSOUND
#PLAYSOUND BREAKABLEHIT
:JUSTDIE
#DONEDISPATCH
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
:WEIRDHIT
#OBJAT $BOBJ [1,.P3]
#DISPATCHTO $BOBJ:JUSTDIE
#IF TEST(.P1 = 1) BSOUND
#NORMMOVE
:KILL1
#GIVE SCORE 1
#OBJAT $BOBJ [1,.P3]
#DISPATCHTO $BOBJ:JUSTDIE
#PLAYSOUND ENEMYDIE
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
:KILL2
#GIVE SCORE 2
#OBJAT $BOBJ [1,.P3]
#DISPATCHTO $BOBJ:JUSTDIE
#PLAYSOUND ENEMYDIE
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
:KILL3
#GIVE SCORE 3
#OBJAT $BOBJ [1,.P3]
#DISPATCHTO $BOBJ:JUSTDIE
#PLAYSOUND ENEMYDIE
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
:SENDSHOT
#OBJAT $BOBJ [1,.P3]
#SENDTO $BOBJ:SHOT
#IF TEST(.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#DIE
"
},

"PLAYER":{
"Number":4,
"Char":2,
"Color":31,
"Cycle":1,
"BlockObject":1,
"BlockPlayer":0,
"DominantColor":1,
"FullColor":1,
"HasOwnChar":1,
"CustomDraw":1,
"AlwaysLit":1,
"Pushable":1,
"CPY":1,
"Code":"
:RESETPLAYER
#CYCLE 1
#SET $NTHROOM ($NTHROOM + 1)
#IF TEST($NTHROOM <= 2) CHECKINP
#IF TEST(~SENDALLENTER!=0) SEND ALL:ENTER
:CHECKINP
#IF TEST($TELHACK ! -1) HACKEDPASSAGENAV
#IF TEST($EDGEHACK ! -1) HACKEDEDGENAV
#IF TEST($MUSTRESTART=0) NORESTART
#SET $MUSTRESTART 0
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SETPOS $PLAYER ~PLAYERENTERX,~PLAYERENTERY
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#SET $PLAYERPAUSED 1
#PAUSE
#IF TEST($LASTSAVESECS < ~REENTRYZAPSAVESECS) NOZAPSAVE
#SET $LASTSAVESECS 0
#SET $DIDTRYMOVE 0
#SAVEBOARD 2
:NOZAPSAVE
/i
#CHECKINP
:NORESTART
#IF TEST(~HEALTH<1) BASICDIE
#SET $PMOVESOUND 1
#IF TEST($PLAYERMODE!3) NORMTEST
:DONE
#IF TEST(.CPY=1) JUSTIDLE
#SET $OLDPUSHX .X
#SET $OLDPUSHY .Y
/i
#SET $CPYMOVEDIR -1
#SET $CPYSHOOTDIR -1
#IF TEST(.X != $OLDPUSHX) WASPUSHED
#IF TEST(.Y != $OLDPUSHY) WASPUSHED
#CHECKINP
:WASPUSHED
#IF TEST(~TORCHCYCLES > 0) DISPATCH OLDDARKAURA
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#IF TEST(.X - $OLDPUSHX > 1) #SET ~LEGACYCAMERA 0
#IF TEST(.X - $OLDPUSHX < -1) #SET ~LEGACYCAMERA 0
#IF TEST(.Y - $OLDPUSHY > 1) #SET ~LEGACYCAMERA 0
#IF TEST(.Y - $OLDPUSHY < -1) #SET ~LEGACYCAMERA 0
#CAMERAFOCUS .X,.Y
#SET ~LEGACYCAMERA $ORIGLEGACYCAMERA
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#CHECKINP
:JUSTIDLE
/i
#CHECKINP
:$CUSTOMDRAW
#IF TEST($PLAYERMODE=5) EDSMILEYCOLOR
#SET $CHR .CHAR
#SET $COL .COLOR
#DISPATCH $PLAYERCOLORDISPLAY
#COLORALL $COL
#CHAR $CHR
#END
:EDSMILEYCOLOR
#COLORAT $DSMCOL .X,.Y
#COLORALL $DSMCOL
#END
:NORMTEST
#IF TEST($EXTRAINVTIME > 0) #SET $EXTRAINVTIME ($EXTRAINVTIME - 1)
#IF TEST($EXTRAINVTIME != 1) SKIPEXTRAINVERASE
#SETGUILABEL EXTRAINV \"            \" -1
#SETGUILABEL EXTRAINVLABEL \"            \" -1
:SKIPEXTRAINVERASE
#SET $CHR .CHAR
#SET $COL .COLOR
#IF TEST(~ENERGIZERCYCLES<1) NOENERGIZER
#IF TEST(~ENERGIZERCYCLES=10) PLAYSOUND ENERGIZEREND
#SET ~ENERGIZERCYCLES (~ENERGIZERCYCLES-1)
#DISPATCH $ENERGIZERDISPLAY
#SET .COLOR $COL
#CHAR $CHR
#OVERCHAR2
:NOENERGIZER
#SET $COL ~PLAYERCOLORNORM
#DISPATCH $PLAYERCOLORDISPLAY
#DISPATCH $PLAYERCHARDISPLAY
#SET .COLOR $COL
#CHAR $CHR
:OVERCHAR2
#IF TEST($PLAYERMODE = 2) DEADLOOP
#IF TEST($PLAYERMODE > 2) DONE
#IF TEST(~TORCHCYCLES = 0) NOTORCHCONCERN
#SET ~TORCHCYCLES (~TORCHCYCLES - 1)
#IF TEST(~OLDTORCHBAR = 0) NORMTORCH
#SET $TROW 9
#IF TEST(~THISGUI = \"ZZTGAME\") ALTTORCH
#SET $TROW 10
#IF TEST(~THISGUI = \"CLASSICZZTGAME\") ALTTORCH
#NORMTORCH
:ALTTORCH
#DRAWGUICHAR 19,$TROW 176 22
#IF TEST(~TORCHCYCLES >= 175) #DRAWGUICHAR 19,$TROW 177 22
#DRAWGUICHAR 18,$TROW 176 22
#IF TEST(~TORCHCYCLES >= 125) #DRAWGUICHAR 18,$TROW 177 22
#DRAWGUICHAR 17,$TROW 176 22
#IF TEST(~TORCHCYCLES >= 75) #DRAWGUICHAR 17,$TROW 177 22
#DRAWGUICHAR 16,$TROW 176 22
#IF TEST(~TORCHCYCLES >= 25) #DRAWGUICHAR 16,$TROW 177 22
#IF TEST(~TORCHCYCLES = 0) NORMTORCH
#EVALTORCHOUT
:NORMTORCH
#DRAWBAR TORCHESBAR 0 200 ~TORCHCYCLES -1
:EVALTORCHOUT
#IF TEST(~TORCHCYCLES > 0) NOTORCHCONCERN
#PLAYSOUND TORCHOUT
#DISPATCH DARKAURA
:NOTORCHCONCERN
#IF TEST($INITDIR = -1) PINPUTTEST
#SET .DIR1 $INITDIR
#SET .DIR2 -1
#SET $INITDIR -1
#SET $ALLOWCPYMOVE 0
#DOMOVE
:PINPUTTEST
#IF TEST($INITSDIR = -1) PINPUTGET
#SET .DIR1 -1
#SET .DIR2 $INITSDIR
#SET $INITSDIR -1
#DOSHOOT
:PINPUTGET
#IF TEST(.CPY=1) CLONEMAINDIRS
#PLAYERINPUT .DIR1 .DIR2
#SET $ALLOWCPYMOVE 1
#SET $CPYMOVEDIR .DIR1
#IF TEST(.DIR2 ! -1) DOSHOOTZZT
#IF TEST(.DIR1 ! -1) SET $LASTSHOOTDIR .DIR1
#IF TEST(.DIR1 ! -1) DOMOVE
#IF TEST(~ISDARK=0) DONE
#IF TEST($TORCHNEEDEDMSG ! 0) DONE
#SET $TORCHNEEDEDMSG 1
Room is dark - you need to light a torch!
#DONE
:CLONEMAINDIRS
#IF TEST($ALLOWCPYMOVE = 0) DONE
#SET .DIR1 $CPYMOVEDIR
#SET .DIR2 $CPYSHOOTDIR
#IF TEST(.DIR2 ! -1) DOSHOOT
#IF TEST(.DIR1 = -1) DONE
#IF NOT BLOCKED .DIR1 CLONETELPLAYER
#SWITCHTYPE [1,.DIR1] OBJECT OBJECTTOUCH PASSAGE PASSAGENAV GEM CLGETGEM AMMO CLGETAMMO \\
    TORCH CLGETTORCH ENERGIZER CLGETENERGIZER STONE CLGETSTONE KEY CLGETKEY DOOR CLDOOR \\
    SLIME KILLSLIME INVISIBLE INVISBLOCKED LAVA LAVABLOCKED FOREST CLFOREST \\
    BOMB CLBOMBDUP BOARDEDGE CLEDGE SCROLL MOVESCROLL
#DONE
:CLEDGE
#SET $EDGEHACK .DIR1
#DONE
:CLGETGEM
#GIVE GEMS 1
#GIVE HEALTH ~GEMHEALTH
#GIVE SCORE 10
#PLAYSOUND COLLECTGEM
#CLONEREPTELPLAYER
:CLGETAMMO
#IF TEST(~WORLDTYPE!=-2) #GIVE AMMO 5
#IF TEST(~WORLDTYPE=-2) #GIVE AMMO 10
#PLAYSOUND COLLECTAMMO
#CLONEREPTELPLAYER
:CLGETTORCH
#GIVE TORCHES 1
#PLAYSOUND COLLECTTORCH
#CLONEREPTELPLAYER
:CLGETENERGIZER
#SETPROPERTY ENERGIZERCYCLES 80
#PLAYSOUND ENERGIZER
#ALL:ENERGIZE
#CLONEREPTELPLAYER
:CLGETSTONE
#IF TEST(~Z < 0) SET ~Z 0
#GIVE Z 1
#PLAYSOUND ENEMYDIE
#CLONEREPTELPLAYER

:CLGETKEY
#COLORAT $COL [1,.DIR1]
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) CLNOKEYCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) CLNOKEYCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:CLNOKEYCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST($OLDKEYN < ~KEYLIMIT) CLCOLLECTKEY
#PLAYSOUND ALREADYHAVEKEY
#DONE
:CLCOLLECTKEY
#IF TEST(~BLACKKEYGEMS=0) CLNORMKEYS
#IF TEST($COL ! 8) CLNORMKEYS
#GIVE GEMS 256
#CLKEYFINAL
:CLNORMKEYS
#SETPROPERTY KEY$$COL ($OLDKEYN+1)
:CLKEYFINAL
#PLAYSOUND COLLECTKEY
#CLONEREPTELPLAYER

:CLDOOR
#COLORAT $COL [1,.DIR1]
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) CLNODOORCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) CLNODOORCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:CLNODOORCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST(~BLACKDOORGEMS=0) CLNORMDOOR
#IF TEST($COL ! 8) CLNORMDOOR
#TAKE GEMS 256 CLDOORFINAL
#CLBYPASSDOOR
:CLNORMDOOR
#IF TEST($OLDKEYN > 0) CLTHRUDOOR
:CLDOORFINAL
'#PLAYSOUND DOORLOCKED
#DONE
:CLTHRUDOOR
#SETPROPERTY KEY$$COL ($OLDKEYN-1)
:CLBYPASSDOOR
#PLAYSOUND OPENDOOR
#CLONEREPTELPLAYER

:CLFOREST
#IF TEST(~WORLDTYPE = -1) CLLEAVEEMPTY
#SPAWN [1,.DIR1] FLOOR;COLOR=2
#PLAYSOUND FORESTSZT$$FORESTITER
#SET $FORESTITER ($FORESTITER+1&7)
#CLONETELPLAYER
:CLLEAVEEMPTY
#PLAYSOUND FOREST
#CLONEREPTELPLAYER

:CLBOMBDUP
#OBJAT $POBJ [1,.DIR1]
#IF TEST($POBJ.P1 != 0) DONE
#DISPATCHTO $POBJ:ACTIVATE
#DONE

:CLONEREPTELPLAYER
#COLORAT $SCOLOR [1,.DIR1]
#SPAWN [1,.DIR1] EMPTY;COLOR=$SCOLOR
:CLONETELPLAYER
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SETPOS $PLAYER [1,.DIR1]
#CAMERAFOCUS [1,.DIR1]
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#DONE

:OK2EDGENAV
#SET $TEMPNOEDGENAV 0
#END
:$WALKBEHAVIOR
#IF TEST($TEMPNOEDGENAV != 0) OK2EDGENAV
#SET .DIR2 -1
#IF TEST(.UNDERID = WATERE) SET .DIR2 0
#IF TEST(.UNDERID = WATERS) SET .DIR2 1
#IF TEST(.UNDERID = WATERW) SET .DIR2 2
#IF TEST(.UNDERID = WATERN) SET .DIR2 3
#IF TEST(.DIR2 = -1) END
#SET $PMOVESOUND 0
#DONEDISPATCH
#SET .DIR1 .DIR2
:DOMOVE
#SET $DIDTRYMOVE 1
#SWITCHTYPE [1,.DIR1] GEM GETGEM AMMO GETAMMO TORCH GETTORCH ENERGIZER GETENERGIZER STONE GETSTONE \\
    KEY GETKEY FAKE MOVEFAKE _WINDTUNNEL MOVEWT
#IF BLOCKED .DIR1 MOVEBLOCKED
#IF TEST($PMOVESOUND=1) PLAYSOUND PLAYERMOVE
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
?.DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
:LEAVEPASSAGE
#IF TEST($PASSAGEEMERGE!1) DONE
#SPAWN $OLDX,$OLDY PASSAGE;P3=$OLDPASSAGESRC;P2=$OLDPASSAGEECOL;COLORALL=$PASSAGECOL
#SET $PASSAGEEMERGE 0
#SET ~PLAYERENTERX .X
#SET ~PLAYERENTERY .Y
#IF TEST($REENTRYCOPY = -1) DONE
#SET .UNDERID $REENTRYCOPY
#SET .UNDERCOLOR $REENTRYCOLOR
#DONE
:MOVEBLOCKED
#SWITCHTYPE [1,.DIR1] BULLET BULLETMOVEHURT STAR MAYBEMOVEHURT BEAR MOVEHURT RUFFIAN MOVEHURT \\
    LION MOVEHURT TIGER MOVEHURT HEAD MOVEHURT SEGMENT MOVEHURT ROTON MOVEHURT DRAGONPUP MOVEHURT \\
    PAIRER MOVEHURT SPIDER MOVEHURT SLIME KILLSLIME
:MOVESPEC
#SET $USESCROLLTRANS 1
#SWITCHTYPE [1,.DIR1] INVISIBLE INVISBLOCKED LAVA LAVABLOCKED FOREST MOVEFOREST BOARDEDGE EDGENAV \\
    PASSAGE PASSAGENAV DOOR MOVEDOOR SCROLL MOVESCROLL OBJECT OBJECTTOUCH TRANSPORTER MOVETRANSPORTER
:MOVEPUSH
#IF TYPEIS [1,.DIR1] BOMB MOVEBOMB
#IF CANPUSH .X,.Y .DIR1 DOPUSH
#IF TYPEIS [1,.DIR1] BOULDER PUSHATTEMPT
#IF TYPEIS [1,.DIR1] SLIDEREW PUSHATTEMPT
#IF TYPEIS [1,.DIR1] SLIDERNS PUSHATTEMPT
#PLAYSOUND PLAYERMOVE
#DONE
:PUSHATTEMPT
#PLAYSOUND PUSHER
#DONE
:GETGEM
#IF TEST($GEMHEALTHMSG ! 0) NOGHMSG
#SET $GEMHEALTHMSG 1
Gems give you health!
:NOGHMSG
#GIVE GEMS 1
#GIVE HEALTH ~GEMHEALTH
#GIVE SCORE 10
#PLAYSOUND COLLECTGEM
:COLLECTMOVE
#IF TEST(.UNDERID = FLOOR) COLLECTLEAVECOPY
:COLLECTEMPTY
#COLORAT $COLLECTCOL [1,.DIR1]
#SPAWN [1,.DIR1] EMPTY;COLOR=$COLLECTCOL
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#FORCEGO .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE
:COLLECTLEAVECOPY
#SET $X .X
#SET $Y .Y
#SET $TESTDIR 0
#OFFSETBYDIR [1, .DIR1] $X $Y
:TESTBOUNDDIRS
#OFFSETBYDIR [1, $TESTDIR] $X $Y
#SWITCHTYPE $X,$Y EMPTY COLLECTEMPTY BOULDER COLLECTEMPTY SLIDERNS COLLECTEMPTY SLIDEREW COLLECTEMPTY
#OFFSETBYDIR [-1, $TESTDIR] $X $Y
#SET $TESTDIR ($TESTDIR+1)
#IF TEST($TESTDIR < 4) TESTBOUNDDIRS
#SPAWN [1,.DIR1] .UNDERID;COLOR=.UNDERCOLOR
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#FORCEGO .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE
:GETAMMO
#IF TEST($AMMOCOUNTER ! 0) NOACMSG
#SET $AMMOCOUNTER 1
#IF TEST(~WORLDTYPE=-2) AMMOSZT
Ammo -- 5 shots per container.
#NOACMSG
:AMMOSZT
Ammunition:
10 shots.
:NOACMSG
#IF TEST(~WORLDTYPE!=-2) #GIVE AMMO 5
#IF TEST(~WORLDTYPE=-2) #GIVE AMMO 10
#PLAYSOUND COLLECTAMMO
#COLLECTMOVE
:GETTORCH
#IF TEST($TORCHCOUNTER ! 0) NOTCMSG
#SET $TORCHCOUNTER 1
Torch -- Used for lighting in the underground.
:NOTCMSG
#GIVE TORCHES 1
#PLAYSOUND COLLECTTORCH
#COLLECTMOVE
:GETENERGIZER
#IF TEST($ENERGOTTEN ! 0) NOTEMSG
#SET $ENERGOTTEN 1
#IF TEST(~WORLDTYPE=-2) ENERSZT
Energizer -- You are invincible
#NOTEMSG
:ENERSZT
Energizer:
You are invincible
:NOTEMSG
#SETPROPERTY ENERGIZERCYCLES 80
#PLAYSOUND ENERGIZER
#ALL:ENERGIZE
#COLLECTMOVE
:GETSTONE
#IF TEST(~WORLDTYPE=-2) STONESZT
You have found a stone of power!
#ADDZCOUNT
:STONESZT
You have found
a stone of power!
:ADDZCOUNT
#IF TEST(~Z < 0) SET ~Z 0
#GIVE Z 1
#PLAYSOUND ENEMYDIE
#COLLECTMOVE
:GETKEY
#COLORAT $COL [1,.DIR1]
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) NOKEYCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) NOKEYCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:NOKEYCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST($OLDKEYN < ~KEYLIMIT) COLLECTKEY
#PLAYSOUND ALREADYHAVEKEY
#IF TEST(~BQUESTHACK=1) ALTNOKEY
#IF TEST(~WORLDTYPE=-2) NOKEYSZT
You can't carry more keys of this color!
#ENDNOKEY
:ALTNOKEY
Can't carry more bananas of this color!
#ENDNOKEY
:NOKEYSZT
You can't carry more
keys of this color!
:ENDNOKEY
#IF TEST(~KEYSBLOCKPLAYER=1) DONE
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#FORCEGO .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE
:COLLECTKEY
#IF TEST(~BLACKKEYGEMS=0) NORMKEYS
#IF TEST($COL ! 8) NORMKEYS
#GIVE GEMS 256
#KEYFINAL
:NORMKEYS
#SETPROPERTY KEY$$COL ($OLDKEYN+1)
#IF TEST(~BQUESTHACK=1) COLORBANANAGET
#IF TEST($COL ! 9) TRYKEY10
You now have a blue key.
#KEYFINAL
:TRYKEY10
#IF TEST($COL ! 10) TRYKEY11
You now have a green key.
#KEYFINAL
:TRYKEY11
#IF TEST($COL ! 11) TRYKEY12
You now have a cyan key.
#KEYFINAL
:TRYKEY12
#IF TEST($COL ! 12) TRYKEY13
You now have a red key.
#KEYFINAL
:TRYKEY13
#IF TEST($COL ! 13) TRYKEY14
You now have a purple key.
#KEYFINAL
:TRYKEY14
#IF TEST($COL ! 14) TRYKEY15
You now have a yellow key.
#KEYFINAL
:TRYKEY15
#IF TEST($COL ! 15) KEYGENERIC
You now have a white key.
#KEYFINAL
:KEYGENERIC
You now have a key.
#KEYFINAL
:COLORBANANAGET
#SET $COLNAME (BQUESTCOLORS[$COL])
#DYNTEXT You have the Ban-$$COLNAME-ana.
:KEYFINAL
#PLAYSOUND COLLECTKEY
#COLLECTMOVE
:OBJECTTOUCH
#OBJAT $POBJ [1,.DIR1]
#IF TEST(~BQUESTHACK=1) ALTTOUCH
#SENDTO $POBJ:TOUCH
#DONE
:ALTTOUCH
#SENDTO $POBJ:TCTVT
#DONE
:KILLSLIME
#PLAYSOUND ENEMYDIE
#COLORAT $COL [1,.DIR1]
#SPAWN [1,.DIR1] BREAKABLE;COLOR=$COL
#DONE
:BULLETMOVEHURT
#OBJAT $POBJ [1,.DIR1]
#IF TEST($POBJ.UNDERID = LAVA) DONE
#IF TEST($POBJ.P1=0) SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS - 1)
#MOVEHURT
:MAYBEMOVEHURT
#OBJAT $POBJ [1,.DIR1]
#IF TEST($POBJ.UNDERID = LAVA) DONE
:MOVEHURT
#IF TEST($PLAYERMODE>1) NULLCOLLISION
#IF ENERGIZED POINTCOLLISION
#TAKE HEALTH ~PLAYERDAMAGE LASTMOVEDIE
#IF TEST(~HEALTH < 1) LASTMOVEDIE
#SET .COLOR ~PLAYERCOLORHURT
#CHAR ~PLAYERCHARHURT
Ouch!
#PLAYSOUND PLAYERHURT
#SET ~TIME 0
#IF TEST(~RESTARTONZAP!0) SET $MUSTRESTART 1
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#FORCEGO .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE
:CPYDIE
#PLAYSOUND ENEMYDIE
#IF TEST(.FLAGS & 32 = 0) SET ~PLAYERCOUNT (~PLAYERCOUNT - 1)
#DONEDISPATCH
#DIE

:RECVHURT
#IF TEST(.CPY=1) CPYDIE
#IF TEST($PLAYERMODE>1) END
#IF TEST($MUSTRESTART!0) END
#IF NOT ENERGIZED REALDAMAGE
#GIVE SCORE $ENERSCORE
#END
:REALDAMAGE
#TAKE HEALTH ~PLAYERDAMAGE LASTMOVEDIE
#IF TEST(~HEALTH < 1) LASTMOVEDIE
#SET .COLOR ~PLAYERCOLORHURT
#CHAR ~PLAYERCHARHURT
Ouch!
#PLAYSOUND PLAYERHURT
#SET ~TIME 0
#IF TEST(~RESTARTONZAP!0) SET $MUSTRESTART 1
#END
:POINTCOLLISION
#IF TYPEIS [1,.DIR1] HEAD GIVE SCORE 1
#IF TYPEIS [1,.DIR1] BEAR GIVE SCORE 1
#IF TYPEIS [1,.DIR1] LION GIVE SCORE 1
#IF TYPEIS [1,.DIR1] DRAGONPUP GIVE SCORE 2
#IF TYPEIS [1,.DIR1] PAIRER GIVE SCORE 2
#IF TYPEIS [1,.DIR1] SPIDER GIVE SCORE 2
#IF TYPEIS [1,.DIR1] RUFFIAN GIVE SCORE 2
#IF TYPEIS [1,.DIR1] TIGER GIVE SCORE 2
#IF TYPEIS [1,.DIR1] ROTON GIVE SCORE 3
#IF TYPEIS [1,.DIR1] SEGMENT GIVE SCORE 3
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
:NULLCOLLISION
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#FORCEGO .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE
:LASTMOVEDIE
#SET ~HEALTH 0
#PLAYSOUND GAMEOVER
:BASICDIE
#DONEDISPATCH
#SETPROPERTY GAMESPEED 0
#SET $PLAYERMODE 2
:DEADLOOP
#IF TEST(~WORLDTYPE=-2) DEADLOOP2
-- Game Over -- Press Escape --
/i
#IF TEST(~HEALTH>0) BACK2LIFE
#DEADLOOP
:DEADLOOP2
-- Game Over --
-- Press Escape --
/i
#IF TEST(~HEALTH>0) BACK2LIFE
#DEADLOOP2
:BACK2LIFE
#SET $PLAYERMODE 1
#CHECKINP

:INVISBLOCKED
#COLORAT $COL [1,.DIR1]
#SPAWN [1,.DIR1] NORMAL;COLOR=$COL
#IF TEST(~INVISIBLESOUND) #PLAYSOUND INVISIBLEWALL
#IF NOT TEST(~INVISIBLEMSG) DONE
#IF TEST(~BQUESTHACK=1) ALTINVIS
#IF TEST(~WORLDTYPE=-2) INVISSZT
You are blocked by an invisible wall.
#DONE
:INVISSZT
You are blocked
by an invisible wall.
#DONE
:ALTINVIS
AAh! You hit a cursed invisible wall!
#DONE

:LAVABLOCKED
#IF TEST(~WATERSOUND) #PLAYSOUND WATERBLOCK
#IF NOT TEST(~WATERMSG) DONE
#IF TEST(~BQUESTHACK=1) ALTWATER
#IF TEST(~WORLDTYPE!=-2) WATERBLOCKED
You are blocked by lava.
#DONE
:WATERBLOCKED
You are blocked by water.
#DONE
:ALTWATER
M.O.E.: That might be water.
#DONE

'Wind tunnel movement grants extra turns (weird exploit)
:MOVEWT
#IF TEST($WTSTOP = 0) TESTWT
#SET $WTSTOP 0
#NOFAKEMSG
:TESTWT
#IF TEST(.DIR1 = -1) NOFAKEMSG
#IF TEST(.DIR1 >= 2) SET $WTSTOP 1
#SET $INITDIR .DIR1
#EXTRATURNS 1
#NOFAKEMSG

:MOVEFAKE
#IF TEST($FAKEMSG ! 0) NOFAKEMSG
#SET $FAKEMSG 1
#IF NOT TEST(~FAKEMSG) NOFAKEMSG
#IF TEST(~BQUESTHACK=1) ALTFAKE
#IF TEST(~WORLDTYPE=-2) FAKESZT
A fake wall--a secret passage!
#NOFAKEMSG
:ALTFAKE
Floors Floors Floors Floors...
#NOFAKEMSG
:FAKESZT
A fake wall:
a secret passage!
:NOFAKEMSG
#PLAYSOUND PLAYERMOVE
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
/.DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE

:MOVEFOREST
#IF TEST($FORMSG ! 0) NOFORMSG
#SET $FORMSG 1
#IF NOT TEST(~FORESTMSG) NOFORMSG
#IF TEST(~WORLDTYPE=-2) FORMSGSZT
A path is cleared through the forest.
#NOFORMSG
:FORMSGSZT
A path is cleared
through the forest.
:NOFORMSG
#IF TEST(~WORLDTYPE = -1) LEAVEEMPTY
#SPAWN [1,.DIR1] FLOOR;COLOR=2
#IF TEST(~FORESTSOUND) #PLAYSOUND FORESTSZT$$FORESTITER
#SET $FORESTITER ($FORESTITER+1&7)
#FINALFOR
:LEAVEEMPTY
#COLORAT $SCOLOR [1,.DIR1]
#SPAWN [1,.DIR1] EMPTY;COLOR=$SCOLOR
#IF TEST(~FORESTSOUND) #PLAYSOUND FOREST
:FINALFOR
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
/.DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE

:MOVEDOOR
#COLORAT $COL [1,.DIR1]
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) NODOORCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) NODOORCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:NODOORCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST(~BLACKDOORGEMS=0) NORMDOOR
#IF TEST($COL ! 8) NORMDOOR
#TAKE GEMS 256 DOORFINAL
#BYPASSDOOR
:NORMDOOR
#IF TEST($OLDKEYN > 0) THRUDOOR
#IF TEST(~BQUESTHACK=1) COLORBANANAREQ
#IF TEST($COL ! 9) TRYDOOR10
The blue door is locked!
#DOORFINAL
:TRYDOOR10
#IF TEST($COL ! 10) TRYDOOR11
The green door is locked!
#DOORFINAL
:TRYDOOR11
#IF TEST($COL ! 11) TRYDOOR12
The cyan door is locked!
#DOORFINAL
:TRYDOOR12
#IF TEST($COL ! 12) TRYDOOR13
The red door is locked!
#DOORFINAL
:TRYDOOR13
#IF TEST($COL ! 13) TRYDOOR14
The purple door is locked!
#DOORFINAL
:TRYDOOR14
#IF TEST($COL ! 14) TRYDOOR15
The yellow door is locked!
#DOORFINAL
:TRYDOOR15
#IF TEST($COL ! 15) DOORGENERIC
The white door is locked!
#DOORFINAL
:COLORBANANAREQ
#SET $COLNAME (BQUESTCOLORS[$COL])
#DYNTEXT The $$COLNAME Banana is required.
#DOORFINAL
:DOORGENERIC
The door is locked!
:DOORFINAL
#PLAYSOUND DOORLOCKED
#DONE
:THRUDOOR
#SETPROPERTY KEY$$COL ($OLDKEYN-1)
#IF TEST(~BQUESTHACK=1) COLORBANANAGIVE
:BYPASSDOOR
You open the door.
#PLAYSOUND OPENDOOR
#COLLECTMOVE
:COLORBANANAGIVE
#SET $COLNAME (BQUESTCOLORS[$COL])
#DYNTEXT The $$COLNAME Banana was given.
#PLAYSOUND OPENDOOR
#COLLECTMOVE

:HACKEDEDGENAV
#IF TEST(.CPY=1) DONE
#SET .DIR1 $EDGEHACK
#SET $EDGEHACK -1
#SET $USESCROLLTRANS 0
:EDGENAV
#IF TEST($TEMPNOEDGENAV != 0) DONE
#IF TEST(~BOARDEDGETRANS != 1) SKIPGENUINEEDGETEST
#IF TEST(.X = 1) SKIPGENUINEEDGETEST
#IF TEST(.X = ~SIZEX) SKIPGENUINEEDGETEST
#IF TEST(.Y = 1) SKIPGENUINEEDGETEST
#IF TEST(.Y = ~SIZEY) SKIPGENUINEEDGETEST
#SET $USESCROLLTRANS 0
:SKIPGENUINEEDGETEST
#IF TEST(~BOARDEDGETRANS = 0) #SET $USESCROLLTRANS 1
#IF TEST(~BOARDEDGETRANS = 2) #SET $USESCROLLTRANS 0
#SET $SRC ~BOARD
#IF TEST(.DIR1 = 0) TRYEXITEAST
#IF TEST(.DIR1 = 1) TRYEXITSOUTH
#IF TEST(.DIR1 = 2) TRYEXITWEST
:TRYEXITNORTH
#SET $DEST ~EXITNORTH
#SET $X .X
#SET $Y ~SIZEY
#TRYEDGENAV
:TRYEXITSOUTH
#SET $DEST ~EXITSOUTH
#SET $X .X
#SET $Y 1
#TRYEDGENAV
:TRYEXITWEST
#SET $DEST ~EXITWEST
#SET $X ~SIZEX
#SET $Y .Y
#TRYEDGENAV
:TRYEXITEAST
#SET $DEST ~EXITEAST
#SET $X 1
#SET $Y .Y
:TRYEDGENAV
#IF TEST($DEST < 1) DONE
#SET ~PLAYERENTERX .X
#SET ~PLAYERENTERY .Y
#SET $DIR .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SET $SAMENAV 0
#IF TEST($SRC = $DEST) SET $SAMENAV 1
#SET $COL .UNDERCOLOR
#GETTYPEINFO .UNDERID \"CHAR\" $UTYPECHAR
#IF TEST(.UNDERID = 0) #SET $COL 0
#DRAWCHAR +0,+0 $UTYPECHAR $COL
#CHANGEBOARD $DEST
#DISPATCH EVALMOVEXY
#SET $INITDIR -1
#IF TEST($RESULT=2) DOEDGENAV
#IF TEST($RESULT=1) MAYBEEDGENAV
:NOEDGENAV
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#CHANGEBOARD $SRC
#ERASECHAR +0,+0
#DONE
:DOEDGENAV
#SWITCHTYPE $X,$Y PLAYER CLONEMOVE EMPTY DEFMOVE FAKE DEFMOVE FLOOR DEFMOVE WATERN DEFMOVE \\
    WATERS DEFMOVE WATERE DEFMOVE WATERW DEFMOVE WEB DEFMOVE \\
    GEM EDGEGEM AMMO EDGEAMMO TORCH EDGETORCH ENERGIZER EDGEENERGIZER STONE EDGESTONE FOREST EDGEERASE \\
    BULLET EDGEHURT STAR EDGEHURT BEAR EDGEHURT RUFFIAN EDGEHURT PAIRER EDGEHURT SPIDER EDGEHURT \\
    LION EDGEHURT TIGER EDGEHURT HEAD EDGEHURT SEGMENT EDGEHURT ROTON EDGEHURT DRAGONPUP EDGEHURT
:EDGEERASE
#SUSPENDDISPLAY 1
#SPAWN $X,$Y EMPTY
#DEFMOVE
:EDGEGEM
#GIVE GEMS 1
#GIVE HEALTH ~GEMHEALTH
#GIVE SCORE 10
#PLAYSOUND COLLECTGEM
#EDGEERASE
:EDGEAMMO
#IF TEST(~WORLDTYPE!=-2) #GIVE AMMO 5
#IF TEST(~WORLDTYPE=-2) #GIVE AMMO 10
#PLAYSOUND COLLECTAMMO
#EDGEERASE
:EDGETORCH
#GIVE TORCHES 1
#PLAYSOUND COLLECTTORCH
#EDGEERASE
:EDGEENERGIZER
#SETPROPERTY ENERGIZERCYCLES 80
#PLAYSOUND ENERGIZER
#ALL:ENERGIZE
#EDGEERASE
:EDGESTONE
#IF TEST(~Z < 0) SET ~Z 0
#GIVE Z 1
#PLAYSOUND ENEMYDIE
#EDGEERASE
:EDGEHURT
#IF ENERGIZED EDGEERASE
#TAKE HEALTH ~PLAYERDAMAGE SET ~HEALTH 0
Ouch!
#PLAYSOUND PLAYERHURT
#EDGEERASE
:MAYBEEDGENAV
#SWITCHTYPE $X,$Y KEY DEFMOVE DOOR REMOTEDOOR BOMB EDGEPUSH BOULDER EDGEPUSH SLIDERNS EDGEPUSH \\
    SLIDEREW EDGEPUSH OBJECT DELAYTOUCH SCROLL WARNTOUCH
#NOEDGENAV
:EDGEPUSH
#IF NOT CANPUSH $X,$Y ($DIR) NOEDGENAV
#SUSPENDDISPLAY 1
#PUSHATPOS $X,$Y ($DIR)
#PLAYSOUND PUSHER
#EDGEERASE
:DELAYTOUCH
#OBJAT $POBJ $X,$Y
#SENDTO $POBJ:TOUCH
#NOEDGENAV
:WARNTOUCH
#PLAYSOUND READSCROLL
#OBJAT $POBJ $X,$Y
#SET $POBJUID ($POBJ.UNDERID)
#SET $POBJCOL ($POBJ.UNDERCOLOR)
#DISPATCHTO $POBJ:$DISPSCROLL
#SPAWN $X,$Y $POBJUID;COLOR=$POBJCOL
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#CHANGEBOARD $SRC
#ERASECHAR +0,+0
/i
#EDGENAV

:REMOTEDOOR
#COLORAT $COL $X,$Y
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) RDNODOORCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) RDNODOORCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:RDNODOORCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST(~BLACKDOORGEMS=0) RDNORMDOOR
#IF TEST($COL ! 8) RDNORMDOOR
#TAKE GEMS 256 RDDOORFINAL
#RDBYPASSDOOR
:RDNORMDOOR
#IF TEST($OLDKEYN > 0) RDTHRUDOOR
:RDDOORFINAL
#PLAYSOUND DOORLOCKED
#NOEDGENAV
:RDTHRUDOOR
#SETPROPERTY KEY$$COL ($OLDKEYN-1)
:RDBYPASSDOOR
#PLAYSOUND OPENDOOR
#COLORAT $SCOLOR $X,$Y
#SUSPENDDISPLAY 1
#SPAWN $X,$Y EMPTY;COLOR=$SCOLOR
#DEFMOVE

:CLONEMOVE
#OBJAT $CPLAYEROBJ $X,$Y
#IF TEST($CPLAYEROBJ.CPY = 0) DEFMOVE
#SET $X ($PLAYER.X)
#SET $Y ($PLAYER.Y)
#CLONEEDGENAV
:DEFMOVE
#SUSPENDDISPLAY 1
#OFFSETBYDIR [-1, $DIR] $X $Y
:CLONEEDGENAV
#SUSPENDDISPLAY 1
#SET ($PLAYER.COLOR) ~PLAYERCOLORNORM
#SET ($PLAYER.CHAR) ~PLAYERCHARNORM
#SETPOS $PLAYER $X,$Y
#CAMERAFOCUS $X,$Y
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#SET ~PLAYERENTERX $X
#SET ~PLAYERENTERY $Y
#SET ($PLAYER.DIR) $DIR
#SUSPENDDISPLAY 0
#SET ~TIME 0
#SET $TEMPNOEDGENAV 0
#IF TEST($USESCROLLTRANS < 1) DODISSOLVE
#SCROLLTOVISUALS 500 ($DIR)
#DISPATCH MODTIME
#IF TEST($LASTSAVESECS < ~BOARDCHANGESAVESECS) NOBCHANGESAVE
#SET $LASTSAVESECS 0
#SET $DIDTRYMOVE 0
#IF TEST($SAMENAV=0) SAVEBOARD 1
:NOBCHANGESAVE
/i
#IF TEST(~SENDALLENTER!=0) SEND ALL:ENTER
#CHECKINP
:HACKEDPASSAGENAV
#PLAYSOUND PASSAGEMOVE
#SET ~PLAYERENTERX .X
#SET ~PLAYERENTERY .Y
#SET ~FROMPASSAGEHACK 1
#SET $POBJ $TELHACK
#COLORAT $COL ($TELHACK.X),($TELHACK.Y)
#SET $EXACTPCOL ($POBJ.P2 & 255)
#SET $TELHACK -1
#COMMONPASSAGENAV
:PASSAGENAV
#PLAYSOUND PASSAGEMOVE
#SET ~PLAYERENTERX .X
#SET ~PLAYERENTERY .Y
#SET ~FROMPASSAGEHACK 0
#OBJAT $POBJ [1,.DIR1]
#COLORAT $COL [1,.DIR1]
#SET $EXACTPCOL ($POBJ.P2 & 255)
:COMMONPASSAGENAV
#SET $REENTRYCOPY -1
#SET $FROMX ($POBJ.X)
#SET $FROMY ($POBJ.Y)
#SET $SRC ~BOARD
#SET $DEST ($POBJ.P3)
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SET $SAMENAV 0
#IF TEST($SRC = $DEST) SET $SAMENAV 1
#CHANGEBOARD $DEST
#SET ~TIME 0
#SET $PASSAGEEMERGE 0
#IF TEST(~FROMPASSAGEHACK=1) DONEPASSAGE
#SET $HIGHESTX -1
#FOREACH $ELEM ALL
#IF NOT TYPEIS ($ELEM.X),($ELEM.Y) PASSAGE NOPASSAGE
#SET $TESTCOL ($ELEM.COLOR)
#IF TEST($ELEM.P2 & 255 != $EXACTPCOL) NOPASSAGE
:SKIPEXACTCOLORTEST
#IF TEST($ELEM.X < $HIGHESTX) NOPASSAGE
#IF TEST(~WORLDTYPE=-1) OKPASSAGE
#IF TEST($SRC != $DEST) OKPASSAGE
#IF TEST($ELEM.X ! $FROMX) OKPASSAGE
#IF TEST($ELEM.Y ! $FROMY) OKPASSAGE
#NOPASSAGE
:OKPASSAGE
#SET $PASSAGEEMERGE 1
#SET $OLDX ($ELEM.X)
#SET $OLDY ($ELEM.Y)
#SET $OLDPASSAGESRC ($ELEM.P3)
#SET $OLDPASSAGEECOL ($ELEM.P2)
#SET $HIGHESTX $OLDX
#SET $PASSAGECOL $TESTCOL
:NOPASSAGE
#FORNEXT
#IF TEST($PASSAGEEMERGE=0) DONEPASSAGE
#IF TEST(~REENTRYMOVESTYPE=0) NOREENTRYMOVE
#SET $REENTRYCOPY ($PLAYER.UNDERID)
#SET $REENTRYCOLOR ($PLAYER.UNDERCOLOR)
#SET ($PLAYER.UNDERID) 0
#SET ($PLAYER.UNDERCOLOR) 15
:NOREENTRYMOVE
#SUSPENDDISPLAY 1
#SPAWN $OLDX,$OLDY WHITE EMPTY
#SET ($PLAYER.COLOR) ~PLAYERCOLORNORM
#SET ($PLAYER.CHAR) ~PLAYERCHARNORM
#SETPOS $PLAYER $OLDX,$OLDY
#SUSPENDDISPLAY 0
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
:DONEPASSAGE
#SET ~FROMPASSAGEHACK 0
#SET ~PLAYERENTERX ($PLAYER.X)
#SET ~PLAYERENTERY ($PLAYER.Y)
#SET ~LEGACYCAMERA 0
#CAMERAFOCUS ~PLAYERENTERX,~PLAYERENTERY
#SET ~LEGACYCAMERA $ORIGLEGACYCAMERA
#SET $PLAYERPAUSED 1
#PAUSE
:DODISSOLVE
#DISPATCH MODTIME
#DISSOLVEVIEWPORT -1
#IF TEST($LASTSAVESECS < ~BOARDCHANGESAVESECS) NOPCHANGESAVE
#SET $LASTSAVESECS 0
#SET $DIDTRYMOVE 0
#IF TEST($SAMENAV=0) SAVEBOARD 1
:NOPCHANGESAVE
/i
#IF TEST(~SENDALLENTER!=0) SEND ALL:ENTER
#CHECKINP
:MOVESCROLL
#PLAYSOUND READSCROLL
#OBJAT $POBJ [1,.DIR1]
#SET $POBJUID ($POBJ.UNDERID)
#SET $POBJCOL ($POBJ.UNDERCOLOR)
#DISPATCHTO $POBJ:$DISPSCROLL
#IF TEST($SCROLLMSG=1) NOSCROLLADV
#IF TEST(.CPY=1) NOSCROLLADV
#SPAWN [1,.DIR1] $POBJUID;COLOR=$POBJCOL
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#FORCEGO .DIR1
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE
:NOSCROLLADV
/i
#SPAWN [1,.DIR1] $POBJUID;COLOR=$POBJCOL
#CHECKINP
:MOVEBOMB
#OBJAT $POBJ [1,.DIR1]
#IF TEST($POBJ.P1 > 0) DOPUSH
#DISPATCHTO $POBJ:ACTIVATE
#DONE
:DOPUSH
#PLAYSOUND PUSHER
#CAMERAFOCUS [1, .DIR1]
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#EXTRATURNS 1
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SET $ALLPUSH 1
?.DIR1
#SET $ALLPUSH 0
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#LEAVEPASSAGE

:DOSHOOTZZT
#IF TEST(~WORLDTYPE != -2) #SET $CPYSHOOTDIR .DIR2
#DOSHOOTCOMMON
:DOSHOOT
#SET $CPYSHOOTDIR .DIR2
:DOSHOOTCOMMON
#WALK .DIR2
#SET $LASTSHOOTDIR .DIR2
#IF TEST(~MAXPLAYERSHOTS = 0) NOSHOOTPOSSIBLE
#IF TEST(~CURPLAYERSHOTS + 1 > ~MAXPLAYERSHOTS) DONE
#IF TEST(~AMMO < 1) OUTOFAMMO
#IF BLOCKED .DIR2 PBLANKBEHAVIOR
:FORCESHOOT
#SET ~CURPLAYERSHOTS (~CURPLAYERSHOTS + 1)
#SET ~AMMO (~AMMO - 1)
#SPAWN [1,.DIR2] BULLET;P1=0;STEPX=.STEPX;STEPY=.STEPY
#PLAYSOUND PLAYERSHOOT
#DONE
:NOSHOOTPOSSIBLE
#IF TEST($CANTSHOOTMSG ! 0) DONE
#SET $CANTSHOOTMSG 1
Can't shoot in this place!
#DONE
:OUTOFAMMO
#IF TEST($AMMOOUTMSG ! 0) DONE
#SET $AMMOOUTMSG 1
You don't have any ammo!
#DONE
:PBLANKBEHAVIOR
#SWITCHTYPE [1,.DIR2] LAVA FORCESHOOT GEM ELIMNEXT BREAKABLE ELIMNEXT
#OBJAT $POBJ [1,.DIR2]
#SWITCHTYPE [1,.DIR2] OBJECT SENDSHOT BULLET ELIMBULLET HEAD ELIMENEMY SEGMENT ELIMENEMY \\
    BEAR ELIMENEMY LION ELIMENEMY TIGER ELIMENEMY DRAGONPUP ELIMENEMY PAIRER ELIMENEMY \\
    SPIDER ELIMENEMY RUFFIAN ELIMENEMY ROTON ELIMENEMY
#DONE
:SENDSHOT
#IF TEST(~POINTBLANKFIRING = 0) DONE
#SENDTO $POBJ:SHOT
#DONE
:ELIMNEXT
#SET ~AMMO (~AMMO - 1)
#COLORAT $SCOLOR [1,.DIR2]
#SPAWN [1,.DIR2] EMPTY;COLOR=$SCOLOR
#PLAYSOUND BREAKABLEHIT
#DONE
:ELIMBULLET
#SET ~AMMO (~AMMO - 1)
#DISPATCHTO $POBJ:JUSTDIE
#PLAYSOUND BREAKABLEHIT
#DONE
:ELIMENEMY
#SET ~AMMO (~AMMO - 1)
#DISPATCHTO $POBJ:JUSTDIE
#PLAYSOUND ENEMYDIE
#DONE
:MOVETRANSPORTER
#OBJAT $POBJ [1,.DIR1]
#WALK .DIR1
#IF TEST($POBJ.STEPX ! .STEPX) DONE
#IF TEST($POBJ.STEPY ! .STEPY) DONE
#DISPATCHTO $POBJ:FINDDEST
#IF TEST($X = -1) DONE
#PUSHATPOS $X,$Y .DIR1
#PLAYSOUND TRANSPORTER
#IF TEST(~TORCHCYCLES > 0) DISPATCH DARKAURA
#SETPOS $PLAYER $X,$Y
#IF TEST(~TORCHCYCLES > 0) DISPATCH LIGHTAURA
#SET ~LEGACYCAMERA 0
#CAMERAFOCUS $X,$Y
#SET ~LEGACYCAMERA $ORIGLEGACYCAMERA
#IF TEST(~FREESCOLLING!=0) UPDATEVIEWPORT
#DONE
:TEMPEND
#END
"
},

"SCROLL":{
"Number":10,
"Char":232,
"Color":15,
"Cycle":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"Pushable":1,
"HasOwnCode":1,
"CustomStart":1,
"Code":"
:SLOOP
/i
#IF TEST(.COLOR & 15 = 15) CWRAP
#COLOR (.COLOR+1)
#SLOOP
:CWRAP
#COLOR 9
#SLOOP
:$DISPSCROLL
#DONEDISPATCH"
},

"LINE":{
"Number":31,
"Char":249,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"CustomDraw":1,
"Code":"
#END
:$CUSTOMDRAW
#SET $LVAL 0
#IF TYPEIS +1,+0 LINE SET $LVAL 1
#IF TYPEIS +1,+0 BOARDEDGE SET $LVAL 1
#IF TYPEIS +0,+1 LINE SET $LVAL ($LVAL+2)
#IF TYPEIS +0,+1 BOARDEDGE SET $LVAL ($LVAL+2)
#IF TYPEIS -1,+0 LINE SET $LVAL ($LVAL+4)
#IF TYPEIS -1,+0 BOARDEDGE SET $LVAL ($LVAL+4)
#IF TYPEIS +0,-1 LINE SET $LVAL ($LVAL+8)
#IF TYPEIS +0,-1 BOARDEDGE SET $LVAL ($LVAL+8)
#CHAR ($LDRAWCHARS[$LVAL])
#END
"
},

"WEB":{
"Number":63,
"Char":249,
"Color":14,
"NoStat":1,
"BlockObject":0,
"Pushable":0,
"CustomDraw":1,
"Code":"
#END
:$CUSTOMDRAW
#SET $LVAL 0
#OBJAT $VAL +1,+0
#IF NOT VALID $VAL NO_L
#IF TEST($VAL.UNDERID = WEB) SET $LVAL 1
:NO_L
#IF TYPEIS +1,+0 WEB SET $LVAL 1
#IF TYPEIS +1,+0 BOARDEDGE SET $LVAL 1
#OBJAT $VAL +0,+1
#IF NOT VALID $VAL NO_U
#IF TEST($VAL.UNDERID = WEB) SET $LVAL ($LVAL+2)
:NO_U
#IF TYPEIS +0,+1 WEB SET $LVAL ($LVAL+2)
#IF TYPEIS +0,+1 BOARDEDGE SET $LVAL ($LVAL+2)
#OBJAT $VAL -1,+0
#IF NOT VALID $VAL NO_R
#IF TEST($VAL.UNDERID = WEB) SET $LVAL ($LVAL+4)
:NO_R
#IF TYPEIS -1,+0 WEB SET $LVAL ($LVAL+4)
#IF TYPEIS -1,+0 BOARDEDGE SET $LVAL ($LVAL+4)
#OBJAT $VAL +0,-1
#IF NOT VALID $VAL NO_D
#IF TEST($VAL.UNDERID = WEB) SET $LVAL ($LVAL+8)
:NO_D
#IF TYPEIS +0,-1 WEB SET $LVAL ($LVAL+8)
#IF TYPEIS +0,-1 BOARDEDGE SET $LVAL ($LVAL+8)
#CHAR ($WDRAWCHARS[$LVAL])
#END
"
},

"_TEXTBLUE":{
"Number":73,
"Color":31,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"_TEXTGREEN":{
"Number":74,
"Color":47,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"_TEXTCYAN":{
"Number":75,
"Color":63,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"_TEXTRED":{
"Number":76,
"Color":79,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"_TEXTPURPLE":{
"Number":77,
"Color":95,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"_TEXTBROWN":{
"Number":78,
"Color":111,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"_TEXTWHITE":{
"Number":79,
"Color":15,
"NoStat":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"TextDraw":1,
"Code":"
#END
"
},

"BLINKWALL":{
"Number":29,
"Char":206,
"Color":14,
"Cycle":1,
"BlockObject":1,
"BlockPlayer":1,
"P1":0,
"P2":0,
"P3":0,
"Code":"
#CYCLE 1
#SET .P3 (.P1+1)
:UNTILZAP
/i
#SET .P3 (.P3-1)
#IF TEST(.P3 > 0) UNTILZAP
#SET $X .X
#SET $Y .Y
#SET $BWCOL .COLOR
:ZAPLOOP
#SET $X ($X+.STEPX)
#SET $Y ($Y+.STEPY)
#SWITCHTYPE $X,$Y PLAYER BUMPPLAYER GEM DOKILL BEAR DOKILL LION DOKILL TIGER DOKILL RUFFIAN DOKILL \\
    HEAD DOKILL SEGMENT DOKILL ROTON DOKILL DRAGONPUP DOKILL PAIRER DOKILL SLIME DOKILL \\
    BULLET DOBULL EMPTY DOZAP
#STOPZAP
:DOBULL
#PLAYSOUND BREAKABLEHIT
#OBJAT $POBJ $X,$Y
#DISPATCHTO $POBJ:JUSTDIE
#DOZAP
:DOKILL
#PLAYSOUND ENEMYDIE
:DOZAP
#IF TEST(.STEPX = 0) ZVERT
#SPAWN $X,$Y _BEAMHORIZ;COLOR=$BWCOL
#ZAPLOOP
:ZVERT
#SPAWN $X,$Y _BEAMVERT;COLOR=$BWCOL
#ZAPLOOP
:STOPZAP
#SET .P3 (.P2*2+1)
:UNTILUNZAP
/i
#SET .P3 (.P3-1)
#IF TEST(.P3 > 0) UNTILUNZAP
#SET $X .X
#SET $Y .Y
:UNZAPLOOP
#SET $X ($X+.STEPX)
#SET $Y ($Y+.STEPY)
#IF TEST(.STEPX = 0) UZVERT
#IF NOT TYPEIS $X,$Y _BEAMHORIZ STOPUNZAP
#SPAWN $X,$Y EMPTY
#UNZAPLOOP
:UZVERT
#IF NOT TYPEIS $X,$Y _BEAMVERT STOPUNZAP
#SPAWN $X,$Y EMPTY
#UNZAPLOOP
:STOPUNZAP
#SET .P3 (.P2*2+1)
#UNTILZAP
:BUMPPLAYER
#WALK CW FLOW
#IF TYPEIS ($X+.STEPX),($Y+.STEPY) EMPTY BUMPCW
#WALK OPP FLOW
#IF TYPEIS ($X+.STEPX),($Y+.STEPY) EMPTY BUMPCCW
#WALK CW FLOW
#IF TEST(~BLINKWALLBUMP=1) SET ~HEALTH 0
#PUSHARRAY $VSTACK $X
#PUSHARRAY $VSTACK $Y
#DISPATCHTO $PLAYER:RECVHURT
#POPARRAY $VSTACK $Y
#POPARRAY $VSTACK $X
#STOPZAP
:BUMPCW
#SETPOS $PLAYER ($X+.STEPX),($Y+.STEPY)
#WALK CCW FLOW
#PUSHARRAY $VSTACK $X
#PUSHARRAY $VSTACK $Y
#DISPATCHTO $PLAYER:RECVHURT
#POPARRAY $VSTACK $Y
#POPARRAY $VSTACK $X
#DOZAP
:BUMPCCW
#SETPOS $PLAYER ($X+.STEPX),($Y+.STEPY)
#WALK CW FLOW
#PUSHARRAY $VSTACK $X
#PUSHARRAY $VSTACK $Y
#DISPATCHTO $PLAYER:RECVHURT
#POPARRAY $VSTACK $Y
#POPARRAY $VSTACK $X
#DOZAP
"
},

"_BEAMHORIZ":{
"Number":33,
"Char":205,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"_BEAMVERT":{
"Number":43,
"Char":186,
"Color":14,
"NoStat":1,
"BlockObject":1,
"BlockPlayer":1,
"Code":"
#END
"
},

"DUPLICATOR":{
"Number":12,
"Char":250,
"Color":15,
"Cycle":3,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"HasOwnChar":1,
"P2":8,
"Code":"
#CYCLE (9 - .P2 * 3)
#DUPINIT
:DUPWAIT
#CHAR 250
/i
:DUPINIT
#CHAR 250
/i
#CHAR 249
/i
#CHAR 248
/i
#CHAR 111
/i
#CHAR 79
/i
#SET $DUPSOUNDOK 0
#IF NOT VALID($PLAYER) DUPEVAL
#SET $DX ($PLAYER.X - .X)
#SET $DY ($PLAYER.Y - .Y)
#IF TEST($DX > ~DUPSOUNDDIST) DUPEVAL
#IF TEST(0 - $DX > ~DUPSOUNDDIST) DUPEVAL
#IF TEST($DY > ~DUPSOUNDDIST) DUPEVAL
#IF TEST(0 - $DY > ~DUPSOUNDDIST) DUPEVAL
#SET $DUPSOUNDOK 1
:DUPEVAL
#IF TYPEIS +.STEPX,+.STEPY PLAYER NODUP
#IF NOT TYPEIS -.STEPX,-.STEPY PLAYER NORMDUP
#SWITCHTYPE +.STEPX,+.STEPY BULLET HURTDUP STAR HURTDUP BEAR HURTDUP RUFFIAN HURTDUP \\
    LION HURTDUP TIGER HURTDUP HEAD HURTDUP SEGMENT HURTDUP ROTON HURTDUP DRAGONPUP HURTDUP \\
    PAIRER HURTDUP SPIDER HURTDUP
#SWITCHTYPE +.STEPX,+.STEPY GEM GEMDUP AMMO AMMODUP TORCH TORCHDUP ENERGIZER ENDUP \\
    STONE STONEDUP KEY KEYDUP DOOR DOORDUP PASSAGE HACKEDPASSAGE BOMB BOMBDUP \\
    FOREST FORESTDUP FAKE FAKEMSG INVISIBLE INVISBLOCKED WATER WATERBLOCKED BOARDEDGE NAVEAST
:NORMDUP
#CLONE +.STEPX,+.STEPY
#IF SAFEPUSH -.STEPX,-.STEPY OPP FLOW PUSHATPOS -.STEPX,-.STEPY OPP FLOW
#IF BLOCKED OPP FLOW NODUP
#PUT OPP FLOW CLONE
#IF TYPEIS +.STEPX,+.STEPY PASSAGE DUPWAIT
#IF TEST($DUPSOUNDOK) #PLAYSOUND DUPLICATE
#DUPWAIT

:HACKEDPASSAGE
#OBJAT $TELHACK +.STEPX,+.STEPY
#DUPWAIT
:NAVEAST
#SET $EDGEHACK 0
#DUPWAIT

:NODUP
#IF TYPEIS +.STEPX,+.STEPY PASSAGE DUPWAIT
#IF TEST($DUPSOUNDOK) #PLAYSOUND DUPFAIL
#DUPWAIT

:HURTDUP
#SPAWN +.STEPX,+.STEPY EMPTY
#OBJAT $BOBJ -.STEPX,-.STEPY
#DISPATCHTO $BOBJ:RECVHURT
#DUPWAIT

:GEMDUP
#GIVE GEMS 1
#GIVE HEALTH ~GEMHEALTH
#GIVE SCORE 10
#PLAYSOUND COLLECTGEM
#DUPWAIT
:AMMODUP
#IF TEST(~WORLDTYPE!=-2) #GIVE AMMO 5
#IF TEST(~WORLDTYPE=-2) #GIVE AMMO 10
#PLAYSOUND COLLECTAMMO
#DUPWAIT
:TORCHDUP
#GIVE TORCHES 1
#PLAYSOUND COLLECTTORCH
#COLORAT $SCOLOR +.STEPX,+.STEPY
#SPAWN +.STEPX,+.STEPY EMPTY;COLOR=$SCOLOR
#DUPWAIT
:ENDUP
#SETPROPERTY ENERGIZERCYCLES 80
#PLAYSOUND ENERGIZER
#ALL:ENERGIZE
#COLORAT $SCOLOR +.STEPX,+.STEPY
#SPAWN +.STEPX,+.STEPY EMPTY;COLOR=$SCOLOR
#DUPWAIT
:STONEDUP
#IF TEST(~Z < 0) SET ~Z 0
#GIVE Z 1
#PLAYSOUND ENEMYDIE
#COLORAT $SCOLOR +.STEPX,+.STEPY
#SPAWN +.STEPX,+.STEPY EMPTY;COLOR=$SCOLOR
#DUPWAIT

:KEYDUP
#COLORAT $COL +.STEPX,+.STEPY
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) NOKEYCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) NOKEYCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:NOKEYCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST($OLDKEYN < ~KEYLIMIT) COLLECTKEY
#NORMDUP
:COLLECTKEY
#IF TEST(~BLACKKEYGEMS=0) NORMKEYS
#IF TEST($COL ! 8) NORMKEYS
#GIVE GEMS 256
#KEYFINAL
:NORMKEYS
#SETPROPERTY KEY$$COL ($OLDKEYN+1)
:KEYFINAL
#PLAYSOUND COLLECTKEY
#COLORAT $SCOLOR +.STEPX,+.STEPY
#SPAWN +.STEPX,+.STEPY EMPTY;COLOR=$SCOLOR
#DUPWAIT

:DOORDUP
#COLORAT $COL +.STEPX,+.STEPY
#SET $COL ($COL & 15)
#IF TEST(~WORLDTYPE=-3) NODOORCOLORDIFF
#IF TEST(~ALLCOLORKEYS!=0) NODOORCOLORDIFF
#IF TEST($COL < 8) SET $COL ($COL + 8)
:NODOORCOLORDIFF
#GETPROPERTY KEY$$COL $OLDKEYN
#IF TEST(~BLACKDOORGEMS=0) NORMDOOR
#IF TEST($COL ! 8) NORMDOOR
#TAKE GEMS 256 DOORFINAL
#BYPASSDOOR
:NORMDOOR
#IF TEST($OLDKEYN > 0) THRUDOOR
:DOORFINAL
'#PLAYSOUND DOORLOCKED
#DUPWAIT
:THRUDOOR
#SETPROPERTY KEY$$COL ($OLDKEYN-1)
:BYPASSDOOR
#PLAYSOUND OPENDOOR
#SPAWN +.STEPX,+.STEPY EMPTY
#DUPWAIT

:BOMBDUP
#OBJAT $POBJ +.STEPX,+.STEPY
#IF TEST($POBJ.P1 != 0) NORMDUP
#DISPATCHTO $POBJ:ACTIVATE
#DUPWAIT

:FORESTDUP
#IF TEST(~WORLDTYPE = -1) LEAVEEMPTY
#SPAWN +.STEPX,+.STEPY FLOOR;COLOR=2
#PLAYSOUND FORESTSZT$$FORESTITER
#SET $FORESTITER ($FORESTITER+1&7)
#DUPWAIT
:LEAVEEMPTY
#COLORAT $SCOLOR +.STEPX,+.STEPY
#SPAWN +.STEPX,+.STEPY EMPTY;COLOR=$SCOLOR
#PLAYSOUND FOREST
#DUPWAIT
:FAKEMSG
#DUPWAIT
:INVISBLOCKED
#PLAYSOUND INVISIBLEWALL
#COLORAT $COL +.STEPX,+.STEPY
#SPAWN +.STEPX,+.STEPY NORMAL;COLOR=$COL
#DUPWAIT
:WATERBLOCKED
#PLAYSOUND WATERBLOCK
#DUPWAIT
"
},

"BOMB":{
"Number":13,
"Char":11,
"Color":14,
"Cycle":6,
"BlockObject":1,
"BlockPlayer":1,
"HasOwnChar":1,
"Pushable":2,
"P1":0,
"Code":"
#IF TEST(.P1 = 0) END
#STARTCDOWN
:ALTMSG
BoomBoom Ticker
#CDOWNSET
:ACTIVATE
#IF TEST(~BQUESTHACK=1) ALTMSG
Bomb activated!
:CDOWNSET
#SET .P1 9
#DONEDISPATCH
:STARTCDOWN
#PLAYSOUND BOMBACTIVATE
:CDOWN
#CHAR (.P1+48)
/i
#SET .P1 (.P1-1)
#IF TEST(.P1 = 1) EXPLODER
#IF TEST(.P1 & 1) BTICK2
#PLAYSOUND BOMBTICK1
#CDOWN
:$PUSHBEHAVIOR
#OBJAT $BOBJ $PUSHDESTX,$PUSHDESTY
#IF TEST($BOBJ.P1 ! 1) SET $PUSH 1
#END
:BTICK2
#PLAYSOUND BOMBTICK2
#CDOWN
:EXPLODER
#CHAR 11
#PLAYSOUND BOMBEXPLODE
#IF TEST(~WORLDTYPE=-2) SZTBOMB
#FORMASK $X $Y +0,+0 BOMB
#OBJAT $BOBJ $X,$Y
#IF TEST($PLAYER.X ! $X) RESTTEST
#IF TEST($PLAYER.Y ! $Y) RESTTEST
#DISPATCHTO $BOBJ:RECVHURT
#TRYNEXT
:SZTBOMB
#FORMASK $X $Y +0,+0 SZTBOMB
#OBJAT $BOBJ $X,$Y
#IF TEST($PLAYER.X ! $X) RESTTEST
#IF TEST($PLAYER.Y ! $Y) RESTTEST
#DISPATCHTO $BOBJ:RECVHURT
#TRYNEXT

:RESTTEST
#SWITCHTYPE $X,$Y EMPTY KILL0 BREAKABLE KILL0 GEM KILL0 BULLET KILLB STAR KILL0 OBJECT SENDBOMBED \\
    HEAD KILL1 BEAR KILL1 LION KILL1 DRAGONPUP KILL2 PAIRER KILL2 SPIDER KILL2 RUFFIAN KILL2 \\
    TIGER KILL2 ROTON KILL3 SEGMENT KILL3 PLAYER KILLCLONE
#TRYNEXT
:KILLCLONE
#DISPATCHTO $BOBJ:RECVHURT
#TRYNEXT
:SENDBOMBED
#SENDTO $BOBJ:BOMBED
#TRYNEXT
:KILLB
#DISPATCHTO $BOBJ:JUSTDIE
#KILL0
:KILL1
#GIVE SCORE 1
#KILL0
:KILL2
#GIVE SCORE 2
#KILL0
:KILL3
#GIVE SCORE 3
:KILL0
#RANDOM $RNDCOLOR 9 15
#SPAWN $X,$Y BREAKABLE;COLOR=$RNDCOLOR
:TRYNEXT
#FORNEXT
/i
#IF TEST(~WORLDTYPE=-2) SZTBOMBCLEAR
#FORMASK $X $Y +0,+0 BOMB
#COLORAT $SCOLOR $X,$Y
#IF TYPEIS $X,$Y BREAKABLE SPAWN $X,$Y EMPTY;COLOR=$SCOLOR
#FORNEXT
#DIE
:SZTBOMBCLEAR
#FORMASK $X $Y +0,+0 SZTBOMB
#COLORAT $SCOLOR $X,$Y
#IF TYPEIS $X,$Y BREAKABLE SPAWN $X,$Y EMPTY;COLOR=$SCOLOR
#FORNEXT
#DIE
"
},

"BEAR":{
"Number":34,
"Char":153,
"Color":6,
"Cycle":3,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"P1":0,
"Code":"
/i
:MMOVE
#SET .P2 ($PLAYER.X - .X)
#SET .P3 ($PLAYER.Y - .Y)
#IF TEST(.P2=0) GOSEEK
#IF TEST(.P3=0) GOSEEK
#IF TEST(.P3<0) TRYUP
#IF TEST(8-.P1<.P3) TRYVERTTEST
#GOHORIZ
:TRYUP
#SET .P3 (0-.P3)
#IF TEST(8-.P1<.P3) TRYVERTTEST
:GOHORIZ
#WALK W
#IF TEST($PLAYER.X > .X) WALK E
#GOFLOW
:TRYVERTTEST
#IF TEST(.P2<0) TRYLEFT
#IF TEST(8-.P1<.P2) RESTART
#GOVERT
:TRYLEFT
#SET .P2 (0-.P2)
#IF TEST(8-.P1<.P2) RESTART
:GOVERT
#WALK N
#IF TEST($PLAYER.Y > .Y) WALK S
:GOFLOW
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF TYPEIS [1, FLOW] BREAKABLE BURSTDIE
#IF BLOCKED FLOW RESTART
?FLOW
#MMOVE
:GOSEEK
#WALK SEEK
#IF ENERGIZED WALK OPP SEEK
#GOFLOW
:HURTPLAYER
#OBJAT $POBJ [1, FLOW]
#SET $ENERSCORE 1
#DISPATCHTO $POBJ:RECVHURT
#SET $ENERSCORE 0
#DIE
:BURSTDIE
#COLORAT $SCOLOR [1, FLOW]
#SPAWN [1, FLOW] EMPTY;COLOR=$SCOLOR
#PLAYSOUND ENEMYDIE
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"RUFFIAN":{
"Number":35,
"Char":5,
"Color":13,
"Cycle":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"P1":0,
"P2":0,
"Code":"
/i
:MMOVE
#IF TEST(.STEPX!0) MOVING
#IF TEST(.STEPY!0) MOVING
#RANDOM .P3 0 16
#IF NOT TEST(.P2 + 8 > .P3) STARTMOVE
#RESTART
:STARTMOVE
#RANDOM .P3 0 8
#IF TEST(.P1 < .P3) RANDMOVE
#WALK SEEK
#RESTART
:RANDMOVE
#WALK RND
#RESTART
:MOVING
#IF TEST($PLAYER.X = .X) RETESTSEEK
#IF TEST($PLAYER.Y = .Y) RETESTSEEK
#DOMOVE
:RETESTSEEK
#RANDOM .P3 0 8
#IF TEST(.P1 < .P3) DOMOVE
#WALK SEEK
:DOMOVE
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF BLOCKED FLOW BLOCKEDRUN
?FLOW
#RANDOM .P3 0 16
#IF NOT TEST(.P2 + 8 > .P3) BLOCKEDRUN
#MMOVE
:BLOCKEDRUN
#WALK I
#RESTART
:HURTPLAYER
#OBJAT $POBJ [1, FLOW]
#SET $ENERSCORE 2
#DISPATCHTO $POBJ:RECVHURT
#SET $ENERSCORE 0
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"OBJECT":{
"Number":36,
"Char":1,
"Color":14,
"Cycle":3,
"BlockObject":1,
"BlockPlayer":1,
"HasOwnChar":1,
"HasOwnCode":1,
"CustomStart":1,
"P1":1,
"P2":0,
"Code":"
#SEND $REALSTART
:$WALKBEHAVIOR
#SET .P3 FLOW
#IF TEST(.P3 = -1) END
#IF TEST(~WORLDTYPE=-2) SEND $SZT_WALK
#IF NOT BLOCKED FLOW SEND $FLOWBEHAVIOR
:$DOTHUD
#IF TEST(.FLAGS & 6 ! 0) END
#IF NOT HASMESSAGE SELF THUD END
#DONEDISPATCH
/i
#THUD
#END
:$SZT_WALK
#TRY FLOW SEND $DOTHUD
#END
:$FLOWBEHAVIOR
?FLOW
#END
:$REALSTART"
},

"SLIME":{
"Number":37,
"Char":42,
"Color":14,
"Cycle":1,
"BlockObject":1,
"BlockPlayer":0,
"P2":0,
"Code":"
#CYCLE 1
#RANDOM $SLIMESUB 0 1
:CHAINEXPAND
#SET .P3 (.P2 * 3 + 3 - $SLIMESUB)
:WAITING
/i
#SET .P3 (.P3-1)
#IF TEST(.P3>0) WAITING
#SET $COL .COLOR
#WALK E
#SET $SCOUNT 0
#SET $RCOUNT 0
#SET $X .X
#SET $Y .Y
:SSPAWN
#IF BLOCKEDAT ($X+.STEPX),($Y+.STEPY) ENDLOOP
#IF TEST($SCOUNT > 0) DOPUT
#EXTRATURNS 1
?FLOW
#SPAWN $X,$Y BREAKABLE;COLOR=$COL
#SET $SCOUNT ($SCOUNT+1)
#ENDLOOP
:DOPUT
#SPAWN ($X+.STEPX),($Y+.STEPY) SLIME;COLOR=$COL;P2=.P2
:ENDLOOP
#WALK CW FLOW
#SET $RCOUNT ($RCOUNT+1)
#IF TEST($RCOUNT < 4) SSPAWN
#IF TEST($SCOUNT > 0) CHAINEXPAND
'#IF NOT BLOCKED N PUT N SLIME;COLOR=$COL;P2=.P2
'#IF NOT BLOCKED S PUT S SLIME;COLOR=$COL;P2=.P2
'#IF NOT BLOCKED W PUT W SLIME;COLOR=$COL;P2=.P2
'#IF NOT BLOCKED E PUT E SLIME;COLOR=$COL;P2=.P2
:TOUCH
#SET $COL .COLOR
#BECOME BREAKABLE;COLOR=$COL
"
},

"SHARK":{
"Number":38,
"Char":94,
"Color":7,
"Cycle":3,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":1,
"P1":0,
"Code":"
/i
:MMOVE
#RANDOM .P3 0 9
#IF TEST(.P1 < .P3) RANDMOVE
#SET .P3 SEEK
#TOMOVE
:RANDMOVE
#SET .P3 RND
:TOMOVE
#IF TYPEIS [1, .P3] PLAYER HURTPLAYER
#IF NOT TYPEIS [1, .P3] LAVA RESTART
#FORCEGO .P3
#MMOVE
:HURTPLAYER
#OBJAT $POBJ [1,.P3]
#DISPATCHTO $POBJ:RECVHURT
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"SPINNINGGUN":{
"Number":39,
"Char":24,
"Color":14,
"Cycle":2,
"BlockObject":1,
"BlockPlayer":1,
"HasOwnChar":1,
"P1":0,
"P2":0,
"Code":"
#CYCLE 2
#WALK N
:SPIN
#CHAR4DIR FLOW 26 25 27 24
/i
#WALK CW FLOW
#RANDOM .P3 1 9
#IF TEST(.P2 & 127 < .P3) SPIN
#RANDOM .P3 0 8
#IF NOT TEST(.P1 < .P3) INTELFIRE
#SET .P3 RND
#TOFIRE
:INTELFIRE
#SET $DX ($PLAYER.X - .X)
#SET $DY ($PLAYER.Y - .Y)
#IF TEST($DX < -2) NEXTCHECK
#IF TEST($DX > 2) NEXTCHECK
#SEEKFIRE
:NEXTCHECK
#IF TEST($DY < -2) SPIN
#IF TEST($DY > 2) SPIN
:SEEKFIRE
#SET .P3 MAJOR SEEK
:TOFIRE
#EXTRATURNS 1
#IF TEST(.P2 & 128 = 128) TOSTAR
#SHOOT SILENT .P3
#SPIN
:TOSTAR
#THROWSTAR .P3
#SPIN
"
},

"PUSHER":{
"Number":40,
"Char":16,
"Color":14,
"Cycle":4,
"BlockObject":1,
"BlockPlayer":1,
"CustomDraw":1,
"Code":"
#IF TYPEIS [1, FLOW] TRANSPORTER NOMOVE
#IF SAFEPUSH1 [1, FLOW] FLOW DOPUSH
:NOMOVE
/i
#RESTART
:DOPUSH
#PLAYSOUND PUSHER
?FLOW
#RESTART
:$CUSTOMDRAW
#OBJAT $SHOWPDIR +0,+0
#CHAR4DIR ($SHOWPDIR.DIR) 16 31 17 30
#END
"
},

"TRANSPORTER":{
"Number":30,
"Char":179,
"Color":15,
"Cycle":2,
"BlockObject":1,
"BlockPlayer":1,
"Pushable":2,
"HasOwnChar":1,
"Code":"
#CHAR4DIR FLOW 179 196 179 196
/i
#CHAR4DIR FLOW 41 118 40 94
/i
#CHAR4DIR FLOW 62 95 60 126
/i
#CHAR4DIR FLOW 41 118 40 94
/i
#RESTART

:FINDDEST
#SET $X .X
#SET $Y .Y
:FOUNDOPP
#PUSHARRAY $VSTACK $X
#PUSHARRAY $VSTACK $Y
#IF NOT BLOCKEDAT ($X+.STEPX),($Y+.STEPY) IMMPUSH
#IF TYPEIS($X+.STEPX),($Y+.STEPY) TRANSPORTER DOUBLETRANS
#IF SAFEPUSH1 ($X+.STEPX),($Y+.STEPY) FLOW IMMPUSH
:DOUBLETRANS
#POPARRAY $VSTACK $Y
#POPARRAY $VSTACK $X
:ADVANCE
#SET $X ($X+.STEPX)
#SET $Y ($Y+.STEPY)
#IF TYPEIS $X,$Y BOARDEDGE NOPUSH
#IF TYPEIS $X,$Y TRANSPORTER;STEPX=(0-.STEPX);STEPY=(0-.STEPY) FOUNDOPP
#ADVANCE
:IMMPUSH
#POPARRAY $VSTACK $Y
#POPARRAY $VSTACK $X
#SET $X ($X+.STEPX)
#SET $Y ($Y+.STEPY)
#END
:NOPUSH
#SET $X -1
#SET $Y -1
#END

:$PUSHBEHAVIOR
#OBJAT $TOBJ $PUSHDESTX,$PUSHDESTY
#SET $DX 0
#SET $DY 0
#OFFSETBYDIR [1, $PUSHDIR] $DX $DY
#IF TEST($TOBJ.STEPX ! $DX) END
#IF TEST($TOBJ.STEPY ! $DY) END
:FOUNDTELOUT
#SET $DX 0
#SET $DY 0
#OFFSETBYDIR [1, $PUSHDIR] $DX $DY
#PUSHARRAY $VSTACK $DX
#PUSHARRAY $VSTACK $DY
#IF NOT BLOCKEDAT ($PUSHDESTX+$DX),($PUSHDESTY+$DY) AFTERTEL
#IF SAFEPUSH1 ($PUSHDESTX+$DX),($PUSHDESTY+$DY) ($PUSHDIR) AFTERTEL
#POPARRAY $VSTACK $DY
#POPARRAY $VSTACK $DX
:NEXTTEL
#SET $PUSHDESTX ($PUSHDESTX+$DX)
#SET $PUSHDESTY ($PUSHDESTY+$DY)
#IF TYPEIS $PUSHDESTX,$PUSHDESTY BOARDEDGE END
#IF TYPEIS $PUSHDESTX,$PUSHDESTY TRANSPORTER;STEPX=(0-$DX);STEPY=(0-$DY) FOUNDTELOUT
#NEXTTEL
:AFTERTEL
#POPARRAY $VSTACK $DY
#POPARRAY $VSTACK $DX
#SET $PUSH 3
#SET $PUSHDESTX ($PUSHDESTX+$DX)
#SET $PUSHDESTY ($PUSHDESTY+$DY)
#PLAYSOUND TRANSPORTER
#END
"
},

"LION":{
"Number":41,
"Char":234,
"Color":12,
"Cycle":2,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"P1":0,
"Code":"
/i
:MMOVE
#RANDOM .P3 0 9
#IF NOT TEST(.P1 < .P3) INTELMOVE
#SET .P3 RND
#TOMOVE
:INTELMOVE
#SET .P3 SEEK
:TOMOVE
#IF TYPEIS [1, .P3] PLAYER HURTPLAYER
#IF BLOCKED .P3 RESTART
#TRY .P3
#MMOVE
:HURTPLAYER
#OBJAT $POBJ [1,.P3]
#SET $ENERSCORE 1
#DISPATCHTO $POBJ:RECVHURT
#SET $ENERSCORE 0
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"TIGER":{
"Number":42,
"Char":227,
"Color":11,
"Cycle":2,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"P1":0,
"P2":0,
"Code":"
/i
:MFIRE
#RANDOM .P3 0 27
#IF TEST(.P2 & 127 < .P3) DEFMOVE
#SET $DX ($PLAYER.X - .X)
#SET $DY ($PLAYER.Y - .Y)
#IF TEST($DX < -2) NEXTCHECK
#IF TEST($DX > 2) NEXTCHECK
#SET .P3 SEEK
#IF TEST($DY > 2) SET .P3 1
#IF TEST($DY < -2) SET .P3 3
#SEEKFIRE
:NEXTCHECK
#IF TEST($DY < -2) DEFMOVE
#IF TEST($DY > 2) DEFMOVE
#SET .P3 SEEK
#IF TEST($DX > 2) SET .P3 0
#IF TEST($DX < -2) SET .P3 2
:SEEKFIRE
#IF TEST(.P2 & 128 = 128) TOSTAR
#SHOOT SILENT .P3
#MFIRE
:TOSTAR
#THROWSTAR .P3
#MFIRE
:DEFMOVE
#RANDOM .P3 0 9
#IF NOT TEST(.P1 < .P3) INTELMOVE
#SET .P3 RND
#TOMOVE
:INTELMOVE
#SET .P3 SEEK
:TOMOVE
#IF TYPEIS [1, .P3] PLAYER HURTPLAYER
#IF BLOCKED .P3 RESTART
#TRY .P3
#MFIRE
:HURTPLAYER
#OBJAT $POBJ [1,.P3]
#SET $ENERSCORE 2
#DISPATCHTO $POBJ:RECVHURT
#SET $ENERSCORE 0
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"HEAD":{
"Number":44,
"Char":233,
"Color":14,
"Cycle":2,
"BlockObject":1,
"BlockPlayer":0,
"Squashable":1,
"P1":0,
"P2":0,
"FOLLOWER":-2,
"LEADER":-2,
"Code":"
:STARTUP
#IF TEST(.LEADER = -65536) NORM
:RESYNC
#WALK RND
#SET .LEADER -65536
#SET $X .X
#SET $Y .Y
'Start of link loop
:LINKREST
#OBJAT $TESTSRC $X,$Y
'Early-out if already linked
#IF VALID($TESTSRC.FOLLOWER) TONORM
#SET $TDIR 0
'Start of 4-directional test
:ROTTEST
#SET $TX $X
#SET $TY $Y
#OFFSETBYDIR [1,$TDIR] $TX $TY
#IF NOT TYPEIS $TX,$TY SEGMENT ROTTESTEND
#OBJAT $TESTDEST $TX,$TY
#IF VALID($TESTDEST.LEADER) ROTTESTEND
'Unlinked segment found; link to it
#SET ($TESTSRC.FOLLOWER) $TESTDEST
#SET ($TESTDEST.LEADER) $TESTSRC
#SET ($TESTDEST.P1) .P1
#SET ($TESTDEST.P2) .P2
'Advance to linked segment and continue
#SET $X $TX
#SET $Y $TY
#LINKREST
'Unable to link this direction; try another
:ROTTESTEND
#SET $TDIR ($TDIR+1)
#IF TEST($TDIR<4) ROTTEST
'Not linkable to followers
#SET ($TESTSRC.FOLLOWER) -2
:TONORM
/i
'This is the main movement iteration start
:NORM
#IF NOT VALID(.FOLLOWER) SKIPLEADERSET
#OBJAT $TESTSRC .X,.Y
#SET $TESTDEST .FOLLOWER
#SET ($TESTDEST.LEADER) $TESTSRC
'Normal motion test; see if player-aligned
:SKIPLEADERSET
#IF NOT ALIGNED NOSEEK
#IF CONTACT TESTSEEK
#IF BLOCKED SEEK NOSEEK
:TESTSEEK
'If player-aligned, will only turn based on intel
#RANDOM $INTEL 0 9
#IF TEST(.P1 < $INTEL) NOSEEK
#WALK SEEK
#TESTMOVE
:NOSEEK
'Deviance determines how often spontaneous turning occurs
#RANDOM $DEV 0 24
#IF TEST($DEV < .P2) WALK RNDP FLOW
:TESTMOVE
'Move according to flow direction, or turn if necessary
#SET $TDIR FLOW
#IF TYPEIS [1,$TDIR] PLAYER HURTMOVE
#IF NOT BLOCKED FLOW COMMITMOVE
#WALK RNDP FLOW
#SET $TDIR2 FLOW
#IF TYPEIS [1,$TDIR2] PLAYER HURTMOVE
#IF NOT BLOCKED FLOW COMMITMOVE
#WALK OPP FLOW
#SET $TDIR2 FLOW
#IF TYPEIS [1,$TDIR2] PLAYER HURTMOVE
#IF NOT BLOCKED FLOW COMMITMOVE
#WALK ($TDIR+2&3)
#SET $TDIR2 FLOW
#IF TYPEIS [1,$TDIR2] PLAYER HURTMOVE
#IF NOT BLOCKED FLOW COMMITMOVE
#WALK ($TDIR)
/i
'When trapped on all sides, flip sequence order
#IF NOT VALID(.FOLLOWER) DONEMOVE
#SET $TESTSRC .FOLLOWER
#SET .LEADER .FOLLOWER
#SET .FOLLOWER -65536
#SET $TX ($TESTSRC.X)
#SET $TY ($TESTSRC.Y)
:FLIPREST
#SET $TESTDEST ($TESTSRC.FOLLOWER)
#SET ($TESTSRC.FOLLOWER) ($TESTSRC.LEADER)
#SET ($TESTSRC.LEADER) $TESTDEST
#IF NOT VALID($TESTDEST) FINALINVERSION
#SET $TESTSRC $TESTDEST
#FLIPREST
:FINALINVERSION
'Exchange head and tail-segment types
#SET $TESTDEST $TESTSRC
#SET $TESTSRC SELF
#SET ($TESTDEST.STEPX) .STEPX
#SET ($TESTDEST.STEPY) .STEPY
#SET ($TESTDEST.LEADER) -65536
#SET ($TESTDEST.TYPE) HEAD
#SENDTO $TESTDEST:STARTUP
#SET .TYPE SEGMENT
#RESTART
:COMMITMOVE
'Commit to move, dragging rest of body
#EXTRATURNS 1
#SET $X .X
#SET $Y .Y
#SET $TESTDEST .FOLLOWER
/FLOW
:BODYMOVE
#IF NOT VALID($TESTDEST) DONEMOVE
#SET $TX ($TESTDEST.X)
#SET $TY ($TESTDEST.Y)
#SETPOS $TESTDEST $X,$Y
#SET $X $TX
#SET $Y $TY
#SET $TESTDEST ($TESTDEST.FOLLOWER)
#BODYMOVE
:DONEMOVE
/i
#NORM
:HURTMOVE
'Special move:  hurt player; create new head
#SET $ENERSCORE 1
#DISPATCHTO $PLAYER:RECVHURT
#SET $ENERSCORE 0
#IF NOT VALID(.FOLLOWER) DIE
#SET $TESTDEST .FOLLOWER
#SET ($TESTDEST.STEPX) .STEPX
#SET ($TESTDEST.STEPY) .STEPY
#SET ($TESTDEST.LEADER) -65536
#SET ($TESTDEST.TYPE) HEAD
#SENDTO $TESTDEST:STARTUP
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"SEGMENT":{
"Number":45,
"Char":79,
"Color":14,
"Cycle":2,
"BlockObject":1,
"BlockPlayer":0,
"Squashable":1,
"P1":0,
"P2":0,
"FOLLOWER":-2,
"LEADER":-2,
"Code":"
:STARTUP
#WALK RND
#KEEPALIVE
:LOCLEADER
#SET $TESTSRC .LEADER
#WALK TOWARDS ($TESTSRC.X),($TESTSRC.Y)
:KEEPALIVE
/i
#IF VALID(.LEADER) LOCLEADER
/i
#IF VALID(.LEADER) LOCLEADER
'Set new leader if previous leader linkage has broken
#SET $TDIR FLOW
#SET $TCOUNT 0
:LTEST
#SET $TX .X
#SET $TY .Y
#SET $TDIR ($TDIR&3)
#OFFSETBYDIR [1,$TDIR] $TX $TY
#IF TYPEIS $TX,$TY SEGMENT DOLTEST
#IF NOT TYPEIS $TX,$TY HEAD LTESTEND
:DOLTEST
#OBJAT $TESTDEST $TX,$TY
#IF TEST($TESTDEST.LEADER = SELF) LTESTEND
#IF TEST($TESTDEST.FOLLOWER = SELF) CHEAPLINK
#IF NOT VALID($TESTDEST.FOLLOWER) CHEAPLINK
:LTESTEND
#SET $TDIR ($TDIR+1)
#SET $TCOUNT ($TCOUNT+1)
#IF TEST($TCOUNT<4) LTEST
#BECOMELEADER
:CHEAPLINK
#SET ($TESTDEST.FOLLOWER) SELF
#SET .LEADER $TESTDEST
#SET .P1 ($TESTDEST.P1)
#SET .P2 ($TESTDEST.P2)
#KEEPALIVE
:BECOMELEADER
'At this point, we need to become a new leader
#SET .LEADER -65536
#SET $X .X
#SET $Y .Y
#SET $TDIR FLOW
'Start of link loop
:LINKREST
#OBJAT $TESTSRC $X,$Y
'Early-out if already linked
#IF VALID($TESTSRC.FOLLOWER) CREATEHEAD
'Begin test with previous look direction
#SET $TCOUNT 0
'Start of 4-directional test
:ROTTEST
#SET $TX $X
#SET $TY $Y
#SET $TDIR ($TDIR&3)
#OFFSETBYDIR [1,$TDIR] $TX $TY
#IF NOT TYPEIS $TX,$TY SEGMENT ROTTESTEND
#OBJAT $TESTDEST $TX,$TY
#IF VALID($TESTDEST.LEADER) ROTTESTEND
'Unlinked segment found; link to it
#SET ($TESTSRC.FOLLOWER) $TESTDEST
#SET ($TESTDEST.LEADER) $TESTSRC
#SET ($TESTDEST.P1) .P1
#SET ($TESTDEST.P2) .P2
'Advance to linked segment and continue
#SET $X $TX
#SET $Y $TY
#LINKREST
'Unable to link this direction; try another
:ROTTESTEND
#SET $TDIR ($TDIR+1)
#SET $TCOUNT ($TCOUNT+1)
#IF TEST($TCOUNT<4) ROTTEST
'Not linkable to followers
#SET ($TESTSRC.FOLLOWER) -2
:CREATEHEAD
#SET .TYPE HEAD
#RESTART
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"ROTON":{
"Number":59,
"Char":148,
"Color":13,
"Cycle":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"P1":0,
"P2":0,
"Code":"
/i
:MMOVE
#RANDOM .P3 0 9
#IF TEST(.P1 < .P3) RANDMOVE
#WALK SEEK
#TOMOVE
:RANDMOVE
#WALK RND
:TOMOVE
#RANDOM .P3 0 (9-.P2)
#IF TEST(.P3>0) TRYMOVE
#WALK RNDP FLOW
:TRYMOVE
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF NOT BLOCKED FLOW DOMOVE
#RESTART
:DOMOVE
?FLOW
#MMOVE
:HURTPLAYER
#OBJAT $POBJ [1, FLOW]
#SET $ENERSCORE 3
#DISPATCHTO $POBJ:RECVHURT
#SET $ENERSCORE 0
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"DRAGONPUP":{
"Number":60,
"Char":148,
"Color":4,
"Cycle":2,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"HasOwnChar":1,
"Pushable":1,
"Squashable":1,
"P1":0,
"P2":0,
"Code":"
:PUP
#CHAR 149
/i
#CHAR 162
/i
#PUP
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"PAIRER":{
"Number":61,
"Char":229,
"Color":1,
"Cycle":2,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"Pushable":1,
"Squashable":1,
"P1":0,
"P2":0,
"Code":"
#END
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"SPIDER":{
"Number":62,
"Char":15,
"Color":14,
"Cycle":1,
"BlockObject":1,
"BlockPlayer":0,
"P1":0,
"Code":"
/i
:MMOVE
#RANDOM .P3 0 9
#IF TEST(.P1 < .P3) RANDMOVE
#WALK SEEK
#TOMOVE
:RANDMOVE
#WALK RND
:TOMOVE
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF TYPEIS [1, FLOW] WEB DOMOVE
#WALK CW FLOW
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF TYPEIS [1, FLOW] WEB DOMOVE
#WALK OPP FLOW
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF TYPEIS [1, FLOW] WEB DOMOVE
#WALK CCW FLOW
#IF TYPEIS [1, FLOW] PLAYER HURTPLAYER
#IF TYPEIS [1, FLOW] WEB DOMOVE
#RESTART
:DOMOVE
?FLOW
#MMOVE
:HURTPLAYER
#OBJAT $POBJ [1, FLOW]
#SET $ENERSCORE 2
#DISPATCHTO $POBJ:RECVHURT
#SET $ENERSCORE 0
#DIE
:JUSTDIE
#DONEDISPATCH
#DIE
"
},

"STONE":{
"Number":64,
"Char":65,
"Color":15,
"Cycle":1,
"DominantColor":1,
"BlockObject":1,
"BlockPlayer":0,
"HasOwnChar":1,
"Pushable":0,
"Code":"
#RANDOM .CHAR 65 90
#CHAR .CHAR
#RANDOM .COLOR 9 15
#COLOR .COLOR
/i
#RESTART
"
}

}
